package colorweaver;

import colorweaver.tools.StringKit;
import colorweaver.tools.TrigTools;
import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application;
import com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration;
import com.badlogic.gdx.graphics.GL20;

import java.util.ArrayList;

import static colorweaver.tools.TrigTools.cos_;
import static colorweaver.tools.TrigTools.sin_;

public class HexGenerator extends ApplicationAdapter {

    private static int[] snuggly63 = {
            0x00000000, 0x000000FF, 0x242424FF, 0x484848FF, 0x6D6D6DFF, 0x919191FF, 0xB6B6B6FF, 0xDADADAFF,
            0xFFFFFFFF, 0xEC5D3AFF, 0xB25835FF, 0x7A4C25FF, 0xE79249FF, 0xBE7F3AFF, 0xE7B653FF, 0x7D762FFF,
            0xDED94BFF, 0xA7AE45FF, 0xD3F749FF, 0x82973DFF, 0xA2D040FF, 0xD7F4AFFF, 0xB3D5A0FF, 0x2A4B21FF,
            0x5EF53EFF, 0x43B839FF, 0x43D93EFF, 0x349536FF, 0x327035FF, 0x59F299FF, 0x4ECF96FF, 0x44AE92FF,
            0x67F5E1FF, 0x34878EFF, 0x59D7E2FF, 0x4FB5DFFF, 0x438FDAFF, 0x2D5691FF, 0x3766DEFF, 0x252CE3FF,
            0x1B1B5BFF, 0x2222A1FF, 0x9D92DFFF, 0x5B29CEFF, 0x795BAEFF, 0x9867E3FF, 0x882CE2FF, 0x531F71FF,
            0xB82AD5FF, 0x861F90FF, 0xE730E9FF, 0xE193DFFF, 0xE366D8FF, 0xE62EAAFF, 0xE4B6D5FF, 0x81416BFF,
            0xB9277EFF, 0xB36691FF, 0xEC3570FF, 0x451524FF, 0xE57D92FF, 0x791E2CFF, 0xAD242FFF, 0xE2282EFF
    };

    private static int[] staccatwo70 = {
            0x00000000, 0x000000FF, 0x333333FF, 0x110909FF, 0x693B4FFF, 0xB60BB5FF, 0x50052DFF, 0x7B0500FF,
            0xD10100FF, 0x933020FF, 0x2B1309FF, 0x110E09FF, 0x694E3BFF, 0xB6330BFF, 0x502105FF, 0x7B6100FF,
            0xD18500FF, 0x8C9320FF, 0x1E2B09FF, 0x091109FF, 0x4E693BFF, 0x8AB60BFF, 0x285005FF, 0x007B18FF,
            0x08D100FF, 0x209364FF, 0x092A2BFF, 0x090A11FF, 0x053D50FF, 0x11007BFF, 0x2B0924FF, 0x6A2093FF,
            0x0023D1FF, 0x0BB6A1FF, 0x3B5A69FF, 0x666666FF, 0x999999FF, 0xBD95C3FF, 0xEFEDF5FF, 0xB8AEF9FF,
            0xA848F3FF, 0xFF2D53FF, 0xFF83C6FF, 0xF5D3D6FF, 0xDE706BFF, 0xC39E95FF, 0xF5EEEDFF, 0xF9B1AEFF,
            0xF35D48FF, 0xFF962DFF, 0xFFB283FF, 0xF5E5D3FF, 0xDEC46BFF, 0xBBC395FF, 0xF5F3EDFF, 0xF9E9AEFF,
            0xF1F348FF, 0x65FF2DFF, 0xBEFF83FF, 0xDAF5D3FF, 0x6BDE7FFF, 0x95C3B8FF, 0x48F3A2FF, 0x2D8FFFFF,
            0x776BDEFF, 0xD3E1F5FF, 0x83E1FFFF, 0xAEF9BDFF, 0xEDF5EFFF, 0xCCCCCCFF, 0xFFFFFFFF,
    };

    private static int[] longsword255 = {
            0x00000000, 0x000000FF, 0x1F1F1FFF, 0x2F2F2FFF, 0x3F3F3FFF, 0x4F4F4FFF, 0x5F5F5FFF, 0x6F6F6FFF,
            0x7F7F7FFF, 0x8F8F8FFF, 0x9F9F9FFF, 0xAFAFAFFF, 0xBFBFBFFF, 0xCFCFCFFF, 0xDFDFDFFF, 0xFFFFFFFF,
            0x3F0000FF, 0x3F2F00FF, 0x1F3F00FF, 0x003F0FFF, 0x003F3FFF, 0x000F3FFF, 0x1F003FFF, 0x3F002FFF,
            0x5F1F1FFF, 0x5F4F1FFF, 0x3F5F1FFF, 0x1F5F2FFF, 0x1F5F5FFF, 0x1F2F5FFF, 0x3F1F5FFF, 0x5F1F4FFF,
            0x7F3F3FFF, 0x7F6F3FFF, 0x5F7F3FFF, 0x3F7F4FFF, 0x3F7F7FFF, 0x3F4F7FFF, 0x5F3F7FFF, 0x7F3F6FFF,
            0x9F5F5FFF, 0x9F8F5FFF, 0x7F9F5FFF, 0x5F9F6FFF, 0x5F9F9FFF, 0x5F6F9FFF, 0x7F5F9FFF, 0x9F5F8FFF,
            0xBF7F7FFF, 0xBFAF7FFF, 0x9FBF7FFF, 0x7FBF8FFF, 0x7FBFBFFF, 0x7F8FBFFF, 0x9F7FBFFF, 0xBF7FAFFF,
            0xDF9F9FFF, 0xDFCF9FFF, 0xBFDF9FFF, 0x9FDFAFFF, 0x9FDFDFFF, 0x9FAFDFFF, 0xBF9FDFFF, 0xDF9FCFFF,
            0xFFBFBFFF, 0xFFEFBFFF, 0xDFFFBFFF, 0xBFFFCFFF, 0xBFFFFFFF, 0xBFCFFFFF, 0xDFBFFFFF, 0xFFBFEFFF,
            0x7F0000FF, 0x7F2F00FF, 0x7F5F00FF, 0x6F7F00FF, 0x3F7F00FF, 0x0F7F00FF, 0x007F1FFF, 0x007F4FFF,
            0x007F7FFF, 0x004F7FFF, 0x001F7FFF, 0x0F007FFF, 0x3F007FFF, 0x6F007FFF, 0x7F005FFF, 0x7F002FFF,
            0x9F1F1FFF, 0x9F4F1FFF, 0x9F7F1FFF, 0x8F9F1FFF, 0x5F9F1FFF, 0x2F9F1FFF, 0x1F9F3FFF, 0x1F9F6FFF,
            0x1F9F9FFF, 0x1F6F9FFF, 0x1F3F9FFF, 0x2F1F9FFF, 0x5F1F9FFF, 0x8F1F9FFF, 0x9F1F7FFF, 0x9F1F4FFF,
            0xBF3F3FFF, 0xBF6F3FFF, 0xBF9F3FFF, 0xAFBF3FFF, 0x7FBF3FFF, 0x4FBF3FFF, 0x3FBF5FFF, 0x3FBF8FFF,
            0x3FBFBFFF, 0x3F8FBFFF, 0x3F5FBFFF, 0x4F3FBFFF, 0x7F3FBFFF, 0xAF3FBFFF, 0xBF3F9FFF, 0xBF3F6FFF,
            0xDF5F5FFF, 0xDF8F5FFF, 0xDFBF5FFF, 0xCFDF5FFF, 0x9FDF5FFF, 0x6FDF5FFF, 0x5FDF7FFF, 0x5FDFAFFF,
            0x5FDFDFFF, 0x5FAFDFFF, 0x5F7FDFFF, 0x6F5FDFFF, 0x9F5FDFFF, 0xCF5FDFFF, 0xDF5FBFFF, 0xDF5F8FFF,
            0xFF7F7FFF, 0xFFAF7FFF, 0xFFDF7FFF, 0xEFFF7FFF, 0xBFFF7FFF, 0x8FFF7FFF, 0x7FFF9FFF, 0x7FFFCFFF,
            0x7FFFFFFF, 0x7FCFFFFF, 0x7F9FFFFF, 0x8F7FFFFF, 0xBF7FFFFF, 0xEF7FFFFF, 0xFF7FDFFF, 0xFF7FAFFF,
            0xBF0000FF, 0xBF2F00FF, 0xBF5F00FF, 0xBF8F00FF, 0xBFBF00FF, 0x8FBF00FF, 0x5FBF00FF, 0x2FBF00FF,
            0x00BF00FF, 0x00BF2FFF, 0x00BF5FFF, 0x00BF8FFF, 0x00BFBFFF, 0x008FBFFF, 0x005FBFFF, 0x002FBFFF,
            0x0000BFFF, 0x2F00BFFF, 0x5F00BFFF, 0x8F00BFFF, 0xBF00BFFF, 0xBF008FFF, 0xBF005FFF, 0xBF002FFF,
            0xDF1F1FFF, 0xDF4F1FFF, 0xDF7F1FFF, 0xDFAF1FFF, 0xDFDF1FFF, 0xAFDF1FFF, 0x7FDF1FFF, 0x4FDF1FFF,
            0x1FDF1FFF, 0x1FDF4FFF, 0x1FDF7FFF, 0x1FDFAFFF, 0x1FDFDFFF, 0x1FAFDFFF, 0x1F7FDFFF, 0x1F4FDFFF,
            0x1F1FDFFF, 0x4F1FDFFF, 0x7F1FDFFF, 0xAF1FDFFF, 0xDF1FDFFF, 0xDF1FAFFF, 0xDF1F7FFF, 0xDF1F4FFF,
            0xFF3F3FFF, 0xFF6F3FFF, 0xFF9F3FFF, 0xFFCF3FFF, 0xFFFF3FFF, 0xCFFF3FFF, 0x9FFF3FFF, 0x6FFF3FFF,
            0x3FFF3FFF, 0x3FFF6FFF, 0x3FFF9FFF, 0x3FFFCFFF, 0x3FFFFFFF, 0x3FCFFFFF, 0x3F9FFFFF, 0x3F6FFFFF,
            0x3F3FFFFF, 0x6F3FFFFF, 0x9F3FFFFF, 0xCF3FFFFF, 0xFF3FFFFF, 0xFF3FCFFF, 0xFF3F9FFF, 0xFF3F6FFF,
            0xFF0000FF, 0xFF2F00FF, 0xFF5F00FF, 0xFF8F00FF, 0xFFBF00FF, 0xFFEF00FF, 0xDFFF00FF, 0xAFFF00FF,
            0x7FFF00FF, 0x4FFF00FF, 0x1FFF00FF, 0x00FF0FFF, 0x00FF3FFF, 0x00FF6FFF, 0x00FF9FFF, 0x00FFCFFF,
            0x00FFFFFF, 0x00CFFFFF, 0x009FFFFF, 0x006FFFFF, 0x003FFFFF, 0x000FFFFF, 0x1F00FFFF, 0x4F00FFFF,
            0x7F00FFFF, 0xAF00FFFF, 0xDF00FFFF, 0xFF00EFFF, 0xFF00BFFF, 0xFF008FFF, 0xFF005FFF, 0xFF002FFF,
    };
    private static int[] battleaxe255 = {
            0x00000000, 0x000000FF, 0x1F1F1FFF, 0x2F2F2FFF, 0x3F3F3FFF, 0x4F4F4FFF, 0x5F5F5FFF, 0x6F6F6FFF,
            0x7F7F7FFF, 0x8F8F8FFF, 0x9F9F9FFF, 0xAFAFAFFF, 0xBFBFBFFF, 0xCFCFCFFF, 0xDFDFDFFF, 0xFFFFFFFF,
            0x3F0000FF, 0x3F0B00FF, 0x3F2400FF, 0x373F00FF, 0x093F00FF, 0x003F2CFF, 0x00143FFF, 0x32003FFF,
            0x5F1F1FFF, 0x5F2B1FFF, 0x5F441FFF, 0x575F1FFF, 0x295F1FFF, 0x1F5F4CFF, 0x1F345FFF, 0x521F5FFF,
            0x7F3F3FFF, 0x7F4B3FFF, 0x7F643FFF, 0x777F3FFF, 0x497F3FFF, 0x3F7F6CFF, 0x3F547FFF, 0x723F7FFF,
            0x9F5F5FFF, 0x9F6B5FFF, 0x9F845FFF, 0x979F5FFF, 0x699F5FFF, 0x5F9F8CFF, 0x5F749FFF, 0x925F9FFF,
            0xBF7F7FFF, 0xBF8B7FFF, 0xBFA47FFF, 0xB7BF7FFF, 0x89BF7FFF, 0x7FBFACFF, 0x7F94BFFF, 0xB27FBFFF,
            0xDF9F9FFF, 0xDFAB9FFF, 0xDFC49FFF, 0xD7DF9FFF, 0xA9DF9FFF, 0x9FDFCCFF, 0x9FB4DFFF, 0xD29FDFFF,
            0xFFBFBFFF, 0xFFCBBFFF, 0xFFE4BFFF, 0xF7FFBFFF, 0xC9FFBFFF, 0xBFFFECFF, 0xBFD4FFFF, 0xF2BFFFFF,
            0x7F0000FF, 0x7F0600FF, 0x7F1600FF, 0x7F2C00FF, 0x7F4800FF, 0x7F6A00FF, 0x6F7F00FF, 0x437F00FF,
            0x137F00FF, 0x007F20FF, 0x007F59FF, 0x00697FFF, 0x00297FFF, 0x1B007FFF, 0x64007FFF, 0x7F004FFF,
            0x9F1F1FFF, 0x9F261FFF, 0x9F361FFF, 0x9F4C1FFF, 0x9F681FFF, 0x9F8A1FFF, 0x8F9F1FFF, 0x639F1FFF,
            0x339F1FFF, 0x1F9F40FF, 0x1F9F79FF, 0x1F899FFF, 0x1F499FFF, 0x3B1F9FFF, 0x841F9FFF, 0x9F1F6FFF,
            0xBF3F3FFF, 0xBF463FFF, 0xBF563FFF, 0xBF6C3FFF, 0xBF883FFF, 0xBFAA3FFF, 0xAFBF3FFF, 0x83BF3FFF,
            0x53BF3FFF, 0x3FBF60FF, 0x3FBF99FF, 0x3FA9BFFF, 0x3F69BFFF, 0x5B3FBFFF, 0xA43FBFFF, 0xBF3F8FFF,
            0xDF5F5FFF, 0xDF665FFF, 0xDF765FFF, 0xDF8C5FFF, 0xDFA85FFF, 0xDFCA5FFF, 0xCFDF5FFF, 0xA3DF5FFF,
            0x73DF5FFF, 0x5FDF80FF, 0x5FDFB9FF, 0x5FC9DFFF, 0x5F89DFFF, 0x7B5FDFFF, 0xC45FDFFF, 0xDF5FAFFF,
            0xFF7F7FFF, 0xFF867FFF, 0xFF967FFF, 0xFFAC7FFF, 0xFFC87FFF, 0xFFEA7FFF, 0xEFFF7FFF, 0xC3FF7FFF,
            0x93FF7FFF, 0x7FFFA0FF, 0x7FFFD9FF, 0x7FE9FFFF, 0x7FA9FFFF, 0x9B7FFFFF, 0xE47FFFFF, 0xFF7FCFFF,
            0xBF0000FF, 0xBF0500FF, 0xBF1000FF, 0xBF2100FF, 0xBF3600FF, 0xBF5000FF, 0xBF6D00FF, 0xBF8D00FF,
            0xBFB100FF, 0xA6BF00FF, 0x7BBF00FF, 0x4EBF00FF, 0x1DBF00FF, 0x00BF16FF, 0x00BF4CFF, 0x00BF86FF,
            0x00BDBFFF, 0x007FBFFF, 0x003DBFFF, 0x0600BFFF, 0x4C00BFFF, 0x9600BFFF, 0xBF009EFF, 0xBF0050FF,
            0xDF1F1FFF, 0xDF251FFF, 0xDF301FFF, 0xDF411FFF, 0xDF561FFF, 0xDF701FFF, 0xDF8D1FFF, 0xDFAD1FFF,
            0xDFD11FFF, 0xC6DF1FFF, 0x9BDF1FFF, 0x6EDF1FFF, 0x3DDF1FFF, 0x1FDF36FF, 0x1FDF6CFF, 0x1FDFA6FF,
            0x1FDDDFFF, 0x1F9FDFFF, 0x1F5DDFFF, 0x261FDFFF, 0x6C1FDFFF, 0xB61FDFFF, 0xDF1FBEFF, 0xDF1F70FF,
            0xFF3F3FFF, 0xFF453FFF, 0xFF503FFF, 0xFF613FFF, 0xFF763FFF, 0xFF903FFF, 0xFFAD3FFF, 0xFFCD3FFF,
            0xFFF13FFF, 0xE6FF3FFF, 0xBBFF3FFF, 0x8EFF3FFF, 0x5DFF3FFF, 0x3FFF56FF, 0x3FFF8CFF, 0x3FFFC6FF,
            0x3FFDFFFF, 0x3FBFFFFF, 0x3F7DFFFF, 0x463FFFFF, 0x8C3FFFFF, 0xD63FFFFF, 0xFF3FDEFF, 0xFF3F90FF,
            0xFF0000FF, 0xFF0400FF, 0xFF0D00FF, 0xFF1B00FF, 0xFF2C00FF, 0xFF4100FF, 0xFF5900FF, 0xFF7300FF,
            0xFF9100FF, 0xFFB100FF, 0xFFD400FF, 0xFFFA00FF, 0xDEFF00FF, 0xB3FF00FF, 0x87FF00FF, 0x58FF00FF,
            0x27FF00FF, 0x00FF0CFF, 0x00FF41FF, 0x00FF79FF, 0x00FFB2FF, 0x00FFEEFF, 0x00D3FFFF, 0x0093FFFF,
            0x0052FFFF, 0x000EFFFF, 0x3700FFFF, 0x7E00FFFF, 0xC800FFFF, 0xFF00ECFF, 0xFF009FFF, 0xFF0050FF,
    };

    private static int[] handaxe126 = {
            0x00000000, 0x000000FF, 0x151515FF, 0x2A2A2AFF, 0x3F3F3FFF, 0x555555FF, 0x6A6A6AFF, 0x7F7F7FFF,
            0x959595FF, 0xAAAAAAFF, 0xBFBFBFFF, 0xD5D5D5FF, 0xEAEAEAFF, 0xFFFFFFFF, 0x550000FF, 0x550E00FF,
            0x553000FF, 0x4A5500FF, 0x0D5500FF, 0x00553BFF, 0x001B55FF, 0x420055FF, 0x7F2A2AFF, 0x7F392AFF,
            0x7F5B2AFF, 0x747F2AFF, 0x377F2AFF, 0x2A7F66FF, 0x2A467FFF, 0x6D2A7FFF, 0xAA5555FF, 0xAA6455FF,
            0xAA8555FF, 0x9FAA55FF, 0x62AA55FF, 0x55AA90FF, 0x5570AAFF, 0x9855AAFF, 0xD57F7FFF, 0xD58E7FFF,
            0xD5B07FFF, 0xCAD57FFF, 0x8DD57FFF, 0x7FD5BBFF, 0x7F9BD5FF, 0xC27FD5FF, 0xFFAAAAFF, 0xFFB9AAFF,
            0xFFDBAAFF, 0xF4FFAAFF, 0xB7FFAAFF, 0xAAFFE6FF, 0xAAC6FFFF, 0xEDAAFFFF, 0xAA0000FF, 0xAA0900FF,
            0xAA1D00FF, 0xAA3B00FF, 0xAA6100FF, 0xAA8D00FF, 0x94AA00FF, 0x5AAA00FF, 0x1AAA00FF, 0x00AA2BFF,
            0x00AA77FF, 0x008DAAFF, 0x0036AAFF, 0x2400AAFF, 0x8500AAFF, 0xAA006AFF, 0xD52A2AFF, 0xD5332AFF,
            0xD5482AFF, 0xD5662AFF, 0xD58B2AFF, 0xD5B82AFF, 0xBED52AFF, 0x84D52AFF, 0x44D52AFF, 0x2AD556FF,
            0x2AD5A1FF, 0x2AB7D5FF, 0x2A61D5FF, 0x4F2AD5FF, 0xB02AD5FF, 0xD52A95FF, 0xFF5555FF, 0xFF5E55FF,
            0xFF7355FF, 0xFF9055FF, 0xFFB655FF, 0xFFE355FF, 0xE9FF55FF, 0xAFFF55FF, 0x6FFF55FF, 0x55FF81FF,
            0x55FFCCFF, 0x55E2FFFF, 0x558CFFFF, 0x7A55FFFF, 0xDA55FFFF, 0xFF55BFFF, 0xFF0000FF, 0xFF0600FF,
            0xFF1600FF, 0xFF2C00FF, 0xFF4900FF, 0xFF6A00FF, 0xFF9100FF, 0xFFBD00FF, 0xFFED00FF, 0xDEFF00FF,
            0xA5FF00FF, 0x68FF00FF, 0x27FF00FF, 0x00FF1DFF, 0x00FF66FF, 0x00FFB2FF, 0x00FDFFFF, 0x00A9FFFF,
            0x0052FFFF, 0x0800FFFF, 0x6600FFFF, 0xC800FFFF, 0xFF00D3FF, 0xFF006BFF,
    };

    private static int[] hatchet49 = {
            0x00000000, 0x000000FF, 0x1F1F1FFF, 0x3F3F3FFF, 0x5F5F5FFF, 0x7F7F7FFF, 0x9F9F9FFF, 0xBFBFBFFF,
            0xDFDFDFFF, 0xFFFFFFFF, 0x7F0000FF, 0x7F1600FF, 0x7F4800FF, 0x6F7F00FF, 0x137F00FF, 0x007F59FF,
            0x00297FFF, 0x64007FFF, 0xBF3F3FFF, 0xBF563FFF, 0xBF883FFF, 0xAFBF3FFF, 0x53BF3FFF, 0x3FBF99FF,
            0x3F69BFFF, 0xA43FBFFF, 0xFF7F7FFF, 0xFF967FFF, 0xFFC87FFF, 0xEFFF7FFF, 0x93FF7FFF, 0x7FFFD9FF,
            0x7FA9FFFF, 0xE47FFFFF, 0xFF0000FF, 0xFF0D00FF, 0xFF2C00FF, 0xFF5900FF, 0xFF9100FF, 0xFFD400FF,
            0xDEFF00FF, 0x87FF00FF, 0x27FF00FF, 0x00FF41FF, 0x00FFB2FF, 0x00D3FFFF, 0x0052FFFF, 0x3700FFFF,
            0xC800FFFF, 0xFF009FFF,
    };

    private static int[] hurlbat49 = {
            0x00000000, 0x000000FF, 0x1F1F1FFF, 0x3F3F3FFF, 0x5F5F5FFF, 0x7F7F7FFF, 0x9F9F9FFF, 0xBFBFBFFF,
            0xDFDFDFFF, 0xFFFFFFFF, 0x890909FF, 0x7F1600FF, 0x6C3D00FF, 0x778808FF, 0x168202FF, 0x006A4AFF,
            0x052E85FF, 0x690585FF, 0xB63636FF, 0xC85E48FF, 0xC28B42FF, 0xA4B535FF, 0x59C545FF, 0x45C59FFF,
            0x355EB5FF, 0xA743C3FF, 0xFF8585FF, 0xF58B75FF, 0xFFCD8BFF, 0xF0FF8BFF, 0x89F575FF, 0x86FFDBFF,
            0x8FB3FFFF, 0xDA76F6FF, 0xFF0707FF, 0xF60D00FF, 0xFF2C00FF, 0xFF5F09FF, 0xF78C00FF, 0xFDD200FF,
            0xDFFF0AFF, 0x84FA00FF, 0x26FA00FF, 0x0AFF49FF, 0x00FCB0FF, 0x00CDF8FF, 0x0958FFFF, 0x3700FFFF,
            0xC000F6FF, 0xFF08A2FF,
    };

    private static int[] daiisy36 = {
            0x00000000, 0x000000FF, 0x5A5A5AFF, 0x50303EFF, 0xCC91C0FF, 0xE925FBFF, 0x730D5DFF, 0xC0001FFF,
            0xFF5DABFF, 0xE4B1A5FF, 0x725D37FF, 0x5D6C4EFF, 0xE0D0A4FF, 0xFFAC49FF, 0x7C7304FF, 0x009F52FF,
            0x6FE400FF, 0x80E2B3FF, 0x477974FF, 0x465D67FF, 0x98D2CCFF, 0x29DFC2FF, 0x14808BFF, 0x0066A1FF,
            0x00B3EAFF, 0x73A5D7FF, 0x22388EFF, 0x2F294BFF, 0x3411BDFF, 0x5E0090FF, 0x4D254BFF, 0xAE78CEFF,
            0x8F52FFFF, 0x4C8DFFFF, 0x8B98BFFF, 0xA5A5A5FF, 0xFFFFFFFF,
    };

    private static int[] okgrid63 = {
            0x00000000, 0x1B1B97FF, 0x3143C6FF, 0x4661EBFF, 0x6627C3FF, 0x8146E8FF, 0xAC0BE4FF, 0x29C7FFFF,
            0x243064FF, 0x40518DFF, 0x596CADFF, 0x7085CAFF, 0x859CE3FF, 0x99B1FBFF, 0x4C1862FF, 0x71398AFF,
            0x8F54AAFF, 0xAA6BC7FF, 0xC281E0FF, 0xD995F8FF, 0xBA2BA7FF, 0xD845C4FF, 0xF45CDDFF, 0x178372FF,
            0x369D8AFF, 0x4CB5A1FF, 0x61CBB6FF, 0x74E0CAFF, 0x86F4DDFF, 0x000000FF, 0x353535FF, 0x555555FF,
            0x707070FF, 0x888888FF, 0x9E9E9EFF, 0xB4B4B3FF, 0xC7C7C7FF, 0xDBDBDAFF, 0xEDEDEDFF, 0x591D33FF,
            0x803C52FF, 0xA1566DFF, 0xBD6D85FF, 0xD7839CFF, 0xEF97B1FF, 0xCA2C6BFF, 0xEA4683FF, 0x4A8227FF,
            0x619C3EFF, 0x76B353FF, 0x89C966FF, 0x9CDE78FF, 0xAEF289FF, 0x876D26FF, 0xA1853DFF, 0xB99C51FF,
            0xCFB164FF, 0xE4C576FF, 0xF8D887FF, 0xB45124FF, 0xD2683BFF, 0xED7E4FFF, 0xDB1B22FF, 0xFD3B39FF,
    };

    private static int[] okgrid255 = {
            0x00000000, 0x000000FF, 0x282828FF, 0x404040FF, 0x555555FF, 0x676767FF, 0x787878FF, 0x888888FF,
            0x979797FF, 0xA6A6A6FF, 0xB4B4B3FF, 0xC1C1C1FF, 0xCECECEFF, 0xDBDBDAFF, 0xE7E7E7FF, 0xF3F3F3FF,
            0xFFFFFEFF, 0x791A19FF, 0x94302BFF, 0xAC423CFF, 0xC2534BFF, 0xD56259FF, 0xE87167FF, 0xF97F74FF,
            0xFD3F1AFF, 0x7D442DFF, 0xD99376FF, 0x92563DFF, 0xF8AE8FFF, 0x64301AFF, 0xC98568FF, 0xA6674CFF,
            0xE9A182FF, 0xB8775BFF, 0xF56C2DFF, 0xE25D1CFF, 0xF99D4AFF, 0xE98F3CFF, 0xD8812EFF, 0xC6721DFF,
            0x62532EFF, 0x98875CFF, 0xF2CA63FF, 0xE0CD9CFF, 0xA7966AFF, 0xC5B384FF, 0xE4BD57FF, 0x87774DFF,
            0xFFD76EFF, 0xEDDAA8FF, 0xD6B04BFF, 0x75663EFF, 0xD2C090FF, 0xF9E6B3FF, 0xC7A23EFF, 0xB6A577FF,
            0x4C3F1BFF, 0xB7932FFF, 0xA7841FFF, 0xF5F11EFF, 0x839320FF, 0x92A231FF, 0xA0B13FFF, 0xAEC04CFF,
            0xC8DB64FF, 0xBBCE59FF, 0xE1F57BFF, 0xD4E870FF, 0x468E04FF, 0x559F21FF, 0x63B032FF, 0x70BF40FF,
            0x2D491CFF, 0x7DCE4DFF, 0x8ADC5AFF, 0xA2F771FF, 0x96EA66FF, 0x405F2FFF, 0x8DB478FF, 0x51733FFF,
            0x7FA56BFF, 0x9AC285FF, 0x61844FFF, 0x70955DFF, 0xA7D092FF, 0xBFEAA9FF, 0xCBF7B5FF, 0xB3DD9EFF,
            0x4BF867FF, 0x3CEA5BFF, 0x2BDB4FFF, 0x10CC42FF, 0x87F9ABFF, 0x7BEC9FFF, 0x6EDE93FF, 0x62D087FF,
            0x54C17AFF, 0x46B26CFF, 0x36A15FFF, 0x249050FF, 0x037E40FF, 0xAAEBDCFF, 0x85C3B5FF, 0x9EDED0FF,
            0x78B4A7FF, 0xB6F7E9FF, 0x92D0C3FF, 0x3E7368FF, 0x5C968AFF, 0x6BA599FF, 0x4E857AFF, 0x2C6056FF,
            0x5BECD1FF, 0x68F9DEFF, 0x4EDEC4FF, 0x174A41FF, 0x3FD0B7FF, 0x2EC1A9FF, 0x17B29AFF, 0x19DDF3FF,
            0x0E5E79FF, 0x26728EFF, 0x3783A1FF, 0x63B3D3FF, 0x4794B3FF, 0x55A4C4FF, 0x7CCFF1FF, 0x88DCFFFF,
            0x70C1E3FF, 0x1A7FC9FF, 0x2D90DCFF, 0x3DA0EEFF, 0x4BAFFFFF, 0x95A5D2FF, 0xBCCDFDFF, 0x8796C2FF,
            0xB0C0EFFF, 0x7987B1FF, 0x59668DFF, 0xA3B2E1FF, 0x6A77A0FF, 0x485378FF, 0x343E60FF, 0x86A1FDFF,
            0x7892ECFF, 0x6A83DAFF, 0x1E2643FF, 0x5C73C7FF, 0x4C61B2FF, 0x3C4F9BFF, 0x4F6BEEFF, 0x2A3980FF,
            0x4159D8FF, 0x3245BFFF, 0x161F5FFF, 0x394CFFFF, 0x232EA1FF, 0x2D35E4FF, 0x2214C4FF, 0x15087DFF,
            0x785CECFF, 0x613BFDFF, 0x674AD6FF, 0x5636BDFF, 0x5221E1FF, 0xAF91FBFF, 0x431E9FFF, 0xA183EAFF,
            0x8164C5FF, 0x9274D8FF, 0x7053B0FF, 0x5E4199FF, 0x492C7EFF, 0x30105DFF, 0x7F1FFAFF, 0xA859FFFF,
            0x9749EAFF, 0x8536D4FF, 0x7120BBFF, 0xCBA2DFFF, 0xD9AFEDFF, 0xE7BCFBFF, 0xBD94D0FF, 0x8D689EFF,
            0x7B588BFF, 0x674676FF, 0xAE86C0FF, 0xA052C3FF, 0x9E78AFFF, 0xD37EF9FF, 0xC370E8FF, 0xB261D6FF,
            0x8D41AEFF, 0x361A42FF, 0x51325EFF, 0x782E97FF, 0xC640FDFF, 0xB32CE8FF, 0x60167DFF, 0x9F0FD2FF,
            0xA625ACFF, 0xBB38C1FF, 0xCF49D4FF, 0xE158E6FF, 0xF267F7FF, 0xEA21D2FF, 0xFD36E4FF, 0x671F5DFF,
            0x803475FF, 0x964689FF, 0xAA569CFF, 0xBD65AEFF, 0xCE73BEFF, 0xEE8FDDFF, 0xDF81CEFF, 0xFE9BEBFF,
            0x971373FF, 0xAF2B88FF, 0xC53D9AFF, 0xD94DACFF, 0xEC5CBCFF, 0xFE6ACCFF, 0xF427AAFF, 0xA01151FF,
            0xFE2482FF, 0xB92A63FF, 0x6F203EFF, 0xD03C74FF, 0xE44D83FF, 0xF85B92FF, 0x8A3452FF, 0x3D1C27FF,
            0xA14664FF, 0xB65675FF, 0xC96585FF, 0xDB7494FF, 0xEC81A2FF, 0x5A333FFF, 0x865866FF, 0xFC8FB0FF,
            0x996977FF, 0x714753FF, 0xDAA2B2FF, 0xCB95A4FF, 0xF6BCCCFF, 0xAB7886FF, 0xBB8795FF, 0xE8B0BFFF,
            0xC4233BFF, 0xDB374AFF, 0xF04858FF,
            0xFF0000FF, 0x00FF00FF, 0x0000FFFF, 0xFFFF00FF, 0xE84200FF,
    };

    private static int[] oktone63 = {
            0x00000000, 0x000000FF, 0x3D3D3DFF, 0x636363FF, 0x808080FF, 0x9E9E9EFF, 0xB9B9B9FF, 0xD1D1D1FF,
            0xE8E8E8FF, 0xFFFFFFFF, 0xA64029FF, 0xF07A5FFF, 0xCE5F45FF, 0xEAAB70FF, 0xAE753FFF, 0xCD9158FF,
            0x8A5622FF, 0xFACC54FF, 0xE0B43CFF, 0xC4991EFF, 0xC5E41BFF, 0xDBFC3CFF, 0x5D6A26FF, 0x7C8B43FF,
            0x98A85DFF, 0xB2C374FF, 0xCADC8AFF, 0xE1F49FFF, 0x60F961FF, 0x47DF4AFF, 0x28C230FF, 0x5EF2BCFF,
            0x44D8A4FF, 0x23BC8BFF, 0x07406DFF, 0x31679AFF, 0x4E88BFFF, 0x68A5DFFF, 0x80C0FDFF, 0x6140E0FF,
            0x4006AAFF, 0x9D68C5FF, 0x7B49A0FF, 0xBC83E6FF, 0x522471FF, 0xA61C9DFF, 0xCE41C2FF, 0xF15DE3FF,
            0xB71C63FF, 0xE14182FF, 0x63263DFF, 0x904A63FF, 0xB56882FF, 0xF39CB9FF, 0xD6839EFF, 0xF53245FF,
            0xFF0000FF, 0x00FF00FF, 0x0000FFFF, 0xF800FFFF, 0xFFFF00FF, 0x00FFFFFF, 0x202020FF, 0xFFFF80FF,
    };
    private static int[] oktone255 = {
            0x00000000, 0x000000FF, 0x282828FF, 0x404040FF, 0x555555FF, 0x676767FF, 0x787878FF, 0x888888FF,
            0x979797FF, 0xA6A6A6FF, 0xB3B3B3FF, 0xC1C1C1FF, 0xCECECEFF, 0xDBDBDBFF, 0xE7E7E7FF, 0xF3F3F3FF,
            0xFFFFFFFF, 0xE87070FF, 0xF97E7EFF, 0xFE3A38FF, 0x47160CFF, 0xE65738FF, 0xD14729FF, 0xF96646FF,
            0xBB3617FF, 0x7E4234FF, 0x945445FF, 0xFAAB98FF, 0x652F22FF, 0xBA7463FF, 0xEC9E8BFF, 0xCC8371FF,
            0xDC917EFF, 0xA86554FF, 0xF38751FF, 0xE27944FF, 0xD06A36FF, 0xBC5B27FF, 0xA74A15FF, 0xFCD2ACFF,
            0x816042FF, 0xB5906EFF, 0xC49E7BFF, 0xD3AC88FF, 0xE1B994FF, 0xEFC6A0FF, 0xFFAE62FF, 0x937151FF,
            0xA48160FF, 0xF0A156FF, 0xE09349FF, 0x563A1FFF, 0x6C4E31FF, 0xD0853CFF, 0xBF762DFF, 0xAC671CFF,
            0x3A2207FF, 0xF5B648FF, 0xE6A83BFF, 0xD79A2CFF, 0xC78C1AFF, 0xDABF7AFF, 0xAE9555FF, 0xE7CC86FF,
            0xCCB26EFF, 0x9E8647FF, 0xBDA462FF, 0x8D7639FF, 0xF4D991FF, 0x7B6529FF, 0x675217FF, 0xE6D056FF,
            0xF3DD61FF, 0xBCA72EFF, 0xCAB53CFF, 0xD8C349FF, 0xAD981CFF, 0xFEEE0FFF, 0x61700DFF, 0xB5D21EFF,
            0xC2E030FF, 0xCEED3FFF, 0x718223FF, 0x252B0AFF, 0xDAFA4CFF, 0x90A242FF, 0x819334FF, 0x9EB14FFF,
            0xB9CD68FF, 0x3D4421FF, 0xDEF48AFF, 0xD2E87FFF, 0xABC05CFF, 0xC5DB73FF, 0x939D70FF, 0x636C44FF,
            0x848E62FF, 0xAFBA8AFF, 0x515A33FF, 0xE2EEBAFF, 0xEEFAC6FF, 0xD6E2AFFF, 0x747E54FF, 0xA1AC7EFF,
            0xC9D5A3FF, 0xBCC897FF, 0x5CB21AFF, 0x69C22DFF, 0x76D13CFF, 0x83DF49FF, 0x8FED55FF, 0x9AFA61FF,
            0x78CD75FF, 0x84DB81FF, 0x90E98DFF, 0x9CF699FF, 0x6BBE69FF, 0x408D3FFF, 0x4F9E4EFF, 0x5DAF5CFF,
            0x2F7B30FF, 0x1C671EFF, 0x1EFE31FF, 0x19FB7AFF, 0xA7FDD9FF, 0x9CF0CDFF, 0x84D6B4FF, 0x90E3C1FF,
            0x77C8A7FF, 0x5DAA8BFF, 0x6AB99AFF, 0x4E9A7DFF, 0x3F896DFF, 0x2E775DFF, 0x1A644BFF, 0x0EF6B4FF,
            0x14DFE6FF, 0x2EECF4FF, 0x065896FF, 0x0F2A41FF, 0x226CADFF, 0x337EC2FF, 0x26435EFF, 0x428ED5FF,
            0x395875FF, 0x4A6B8AFF, 0x779CBFFF, 0x85ABCFFF, 0x519EE7FF, 0x92B9DEFF, 0x5EADF8FF, 0x5A7C9DFF,
            0x9FC6ECFF, 0xABD3FAFF, 0x698CAFFF, 0x5A66F4FF, 0x2734E8FF, 0x4C54DDFF, 0x3D40C3FF, 0x2D28A6FF,
            0x1E10C9FF, 0x9188F1FF, 0x8279DFFF, 0x7369CBFF, 0x6358B6FF, 0x51459FFF, 0x3E3084FF, 0x281562FF,
            0x884FF5FF, 0x773CDEFF, 0x6526C4FF, 0xA988C4FF, 0x9979B3FF, 0xB896D3FF, 0x634779FF, 0xE2BDFFFF,
            0xC7A3E3FF, 0x77598EFF, 0xD5B0F1FF, 0x8969A1FF, 0xBB73EFFF, 0x9954CAFF, 0x331B44FF, 0xAB64DDFF,
            0x4E3361FF, 0x8743B5FF, 0x72319DFF, 0xAA31F3FF, 0x5B1982FF, 0x9618DCFF, 0xCA4BDBFF, 0xDC5BEDFF,
            0xA227B2FF, 0xB73BC7FF, 0xED69FEFF, 0x8B089BFF, 0xE624D9FF, 0x652060FF, 0xF939EBFF, 0x94468CFF,
            0x7F3477FF, 0xA8569FFF, 0xCC74C2FF, 0xBB66B1FF, 0xEC8FE1FF, 0xDC82D1FF, 0xFB9CEFFF, 0x951476FF,
            0xAE2C8BFF, 0xC33E9EFF, 0xD74EB0FF, 0xDC089DFF, 0xEA5DC0FF, 0xFB6BD0FF, 0xF129AFFF, 0x9F1255FF,
            0xFD2588FF, 0xB82B67FF, 0xCE3D78FF, 0x6F2040FF, 0xE34D88FF, 0x893455FF, 0xF65C97FF, 0xA04667FF,
            0x3D1C28FF, 0xB55678FF, 0xC86588FF, 0xDA7497FF, 0xEB82A6FF, 0xFB8FB4FF, 0x593340FF, 0x714755FF,
            0x865867FF, 0xCA95A6FF, 0xAA7888FF, 0x986978FF, 0xF6BCCEFF, 0xBB8797FF, 0xE8B0C1FF, 0xD9A3B3FF,
            0xC32244FF, 0xDA3654FF, 0xEF4762FF, 0x791922FF, 0x942F34FF, 0xAC4145FF, 0xC15254FF, 0xE82629FF,
            0xD56162FF,
            0xFF0000FF, 0x00FF00FF, 0x0000FFFF, 0xFF00FFFF, 0xFFFF00FF, 0x00FFFFFF, 0x808080FF
    };
//    private static int[] sixeightfive255 = new int[256];
//
//    static {
//        int idx = 1;
//        for (int i = 0; i < 17; i++) {
//            sixeightfive255[idx++] = (i * 15) * 0x01010100 | 0xFF;
//        }
//        for (int r : new int[]{0x00, 0x33, 0x66, 0x99, 0xCC, 0xFF}) {
//            for (int g : new int[]{0x00, 0x24, 0x49, 0x6D, 0x92, 0xB6, 0xDB, 0xFF}) {
//                for (int b : new int[]{0x00, 0x40, 0x80, 0xBF, 0xFF}) {
//                    int color = r << 24 | g << 16 | b << 8 | 0xFF;
//                    if(color != 255 && color != -1)
//                        sixeightfive255[idx++] = color;
//                }
//            }
//        }
//    }
//    private static int[] sixeightfiveroot255 = new int[256];
//    static {
//        int idx = 1;
//        for (int i = 0; i < 17; i++) {
//            int level = (int) (Math.pow(i / 16.0, 2.0/3.0) * 255.0 + 0.5);
//            sixeightfiveroot255[idx++] = level * 0x01010100 | 0xFF;
//        }
//        for (int ri = 0; ri < 6; ri++) {
//            int r = (int) (Math.pow(ri / 5.0, 2.0/3.0) * 255.0 + 0.5);
//            for (int gi = 0; gi < 8; gi++) {
//                int g = (int) (Math.pow(gi / 7.0, 2.0/3.0) * 255.0 + 0.5);
//                for (int bi = 0; bi < 5; bi++) {
//                    int b = (int) (Math.pow(bi / 4.0, 2.0/3.0) * 255.0 + 0.5);
//                    int color = r << 24 | g << 16 | b << 8 | 0xFF;
//                    if(color != 255 && color != -1)
//                        sixeightfiveroot255[idx++] = color;
//                }
//            }
//        }
//    }


    public static int[] PALETTE = okgrid255;
    public static String NAME = "okgrid-255";
    public static String SPACE = "OklabCareful";
    public static PaletteReducer.ColorMetric METRIC = PaletteReducer.oklabCarefulMetric;
//    public static String SPACE = "OkSmooth";
//    public static PaletteReducer.ColorMetric METRIC = PaletteReducer.oklabSmoothMetric;

    public static void main(String[] arg) {
        Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();
        config.setTitle(".hex Palette Generator");
        config.setWindowedMode(640, 480);
        config.setIdleFPS(10);
        config.useVsync(true);
        config.setResizable(false);
        new Lwjgl3Application(new HexGenerator(), config);
        PaletteCubeGenerator.main(arg);
        OkCarefulPalettizerAll.main(arg);
    }

    @Override
    public void create() {
        /*
        int[] betts = {
                0x00000000,
                0x000000FF, 0x282828FF, 0x585858FF, 0x868686FF, 0xA2A2A2FF, 0xCBCBCBFF, 0xFFFFFFFF, 0xA6D755FF,
                0x8ABF5EFF, 0x7AA221FF, 0x6E8A31FF, 0x0A4111FF, 0x0F661DFF, 0x147E25FF, 0x229E35FF, 0x42C372FF,
                0x8CE7A6FF, 0x78FAE6FF, 0x00C7A5FF, 0x009282FF, 0x163135FF, 0x21526BFF, 0x3B768FFF, 0x53A1ADFF,
                0x8CDAFFFF, 0x50AAF7FF, 0x3E83EBFF, 0x354AD7FF, 0x1D2DAAFF, 0x152135FF, 0x66397EFF, 0x7E5596FF,
                0xA68ABFFF, 0xDFBFEFFF, 0xC772FFFF, 0x9245E7FF, 0x6E05C3FF, 0x350082FF, 0x721C2FFF, 0xB22E69FF,
                0xE54286FF, 0xFF6EAFFF, 0xFF9AC7FF, 0xFFD7F3FF, 0xE3B3C3FF, 0xCB96A2FF, 0xAA768AFF, 0xCF4929FF,
                0xF3820DFF, 0xFFAA0DFF, 0xFFD3A6FF, 0xFFBB8AFF, 0xE7A67AFF, 0xBB7251FF, 0x82491DFF, 0x513115FF,
                0xB7515AFF, 0x6E5A51FF, 0x8A7A5AFF, 0xB79E5EFF, 0xDFC721FF, 0xFFDF00FF, 0xFFF3B3FF,
        };
        int[] betsy255 = new int[] {
                0x00000000, 0x000000FF, 0x282828FF, 0x585858FF, 0x868686FF, 0xA2A2A2FF, 0xCBCBCBFF, 0xFFFFFFFF,
                0xA6D755FF, 0x8ABF5EFF, 0x7AA221FF, 0x6E8A31FF, 0x0A4111FF, 0x0F661DFF, 0x147E25FF, 0x229E35FF,
                0x42C372FF, 0x8CE7A6FF, 0x78FAE6FF, 0x00C7A5FF, 0x009282FF, 0x163135FF, 0x21526BFF, 0x3B768FFF,
                0x53A1ADFF, 0x8CDAFFFF, 0x50AAF7FF, 0x3E83EBFF, 0x354AD7FF, 0x1D2DAAFF, 0x152135FF, 0x66397EFF,
                0x7E5596FF, 0xA68ABFFF, 0xDFBFEFFF, 0xC772FFFF, 0x9245E7FF, 0x6E05C3FF, 0x350082FF, 0x721C2FFF,
                0xB22E69FF, 0xE54286FF, 0xFF6EAFFF, 0xFF9AC7FF, 0xFFD7F3FF, 0xE3B3C3FF, 0xCB96A2FF, 0xAA768AFF,
                0xCF4929FF, 0xF3820DFF, 0xFFAA0DFF, 0xFFD3A6FF, 0xFFBB8AFF, 0xE7A67AFF, 0xBB7251FF, 0x82491DFF,
                0x513115FF, 0xB7515AFF, 0x6E5A51FF, 0x8A7A5AFF, 0xB79E5EFF, 0xDFC721FF, 0xFFDF00FF, 0xFFF3B3FF,
                0xC99A14FF, 0xFEC64CFF, 0xC29D48FF, 0xBA7825FF, 0xFFAA4DFF, 0xD39A5EFF, 0xEEA45CFF, 0xD1AB8CFF,
                0xAD6329FF, 0xD78350FF, 0xB15301FF, 0xE35A00FF, 0xCF5E2CFF, 0x672F16FF, 0xAA5635FF, 0xC73908FF,
                0xA23111FF, 0x9C5A4DFF, 0xFB6440FF, 0xA47F71FF, 0x8B1005FF, 0xF58D7CFF, 0xC61300FF, 0x7B2921FF,
                0xED6858FF, 0x66090EFF, 0x933529FF, 0xE73129FF, 0xB71719FF, 0xE79C94FF, 0xBF3C3DFF, 0xF80334FF,
                0xC86160FF, 0xD08684FF, 0xEB4250FF, 0xA81A31FF, 0xD52144FF, 0xF46774FF, 0xEA064CFF, 0x580D26FF,
                0xD66B7BFF, 0xB01A4DFF, 0x2C0613FF, 0xDD4668FF, 0xF22B70FF, 0xCF1562FF, 0x8C385DFF, 0x845A6BFF,
                0xE7298CFF, 0xB6036DFF, 0x60324AFF, 0xD76FA4FF, 0x751752FF, 0xD40D98FF, 0x49103EFF, 0xBF2891FF,
                0xAA4289FF, 0xF353C8FF, 0x945D81FF, 0x93217DFF, 0xDC32BCFF, 0xDF94C8FF, 0xF917E0FF, 0xC74DB4FF,
                0xE773D6FF, 0xFC78ECFF, 0xAF06A1FF, 0x9A2099FF, 0xE557E0FF, 0xD631DEFF, 0xB82BC5FF, 0xEA1AF8FF,
                0x9B46A1FF, 0x6B1873FF, 0x50105AFF, 0x9C29B5FF, 0xBE14E5FF, 0xC050E8FF, 0xD897FCFF, 0x513562FF,
                0xA36BC5FF, 0xCEADE7FF, 0x7D28CAFF, 0x5F1E9EFF, 0x9C6EF9FF, 0xAC90E9FF, 0xBBB2D9FF, 0x6843C2FF,
                0x7F64CEFF, 0x762BFEFF, 0x8E86BDFF, 0x6329E7FF, 0x4A3896FF, 0x5F0AF2FF, 0x5A5A86FF, 0x21105AFF,
                0x626BFEFF, 0x29189CFF, 0xB3B3B3FF, 0x474747FF, 0xE9E9E9FF, 0x6B6B6BFF, 0x2C1ABFFF, 0x394ABDFF,
                0x2910DEFF, 0xC4D7FCFF, 0x4461D2FF, 0x88AEF9FF, 0x2643FBFF, 0x1E3283FF, 0x0838CFFF, 0x627FAAFF,
                0x115DF3FF, 0x012757FF, 0x29426BFF, 0x2757A7FF, 0x185ABFFF, 0x207FE3FF, 0x396B9CFF, 0x3D78B3FF,
                0x6BA4CEFF, 0x0B9ADBFF, 0x81C5D9FF, 0x42A5C6FF, 0xAFC7CFFF, 0x6E868EFF, 0x52CEEFFF, 0x39BDC6FF,
                0x23E1EFFF, 0xAFF2F5FF, 0x082423FF, 0x83EBE1FF, 0x21938FFF, 0x7AC6BEFF, 0x104947FF, 0x49B39AFF,
                0x296B5AFF, 0x319E7AFF, 0x41FFC6FF, 0x65E1B6FF, 0x39DAA3FF, 0x038963FF, 0x537166FF, 0x31B57FFF,
                0x24F59BFF, 0x49FF8AFF, 0x06EB6FFF, 0x39AD5AFF, 0x6BB87AFF, 0x378D43FF, 0x83FF8DFF, 0xD6F7D6FF,
                0x809D81FF, 0x4C724AFF, 0x4FD456FF, 0x66F562FF, 0x07FF1BFF, 0x4AEF31FF, 0x46AF32FF, 0x39C621FF,
                0x7BDA6AFF, 0x29A407FF, 0x97BF8DFF, 0x62FF39FF, 0x45892AFF, 0x639356FF, 0x314A29FF, 0x16210BFF,
                0x213118FF, 0x64CD0AFF, 0x7BEE16FF, 0x72B546FF, 0x99F841FF, 0xBFEF94FF, 0x96DF1DFF, 0x9FD005FF,
                0xC7FF2DFF, 0x8CAD29FF, 0xA6B925FF, 0x6B7321FF, 0xBCC685FF, 0xDAE45CFF, 0x969735FF, 0xCBC26CFF,
                0xBDB573FF, 0x52490EFF, 0xFBE76AFF, 0xA58C29FF, 0xDAD0B0FF, 0x8E7211FF, 0xEFCA64FF, 0x867545FF,
        };

*/

//int[] honona = {
//        0x00000000, 0xF6C4BAFF, 0xE5858CFF, 0xBD516DFF, 0x80436BFF, 0x383552FF, 0x58485EFF, 0x8D7B80FF, 0xBAA9A6FF, 0xDBD6CAFF, 0xFFFBDEFF, 0xB9EADAFF, 0xB0D18BFF, 0x81C0C6FF, 0x6F9D81FF, 0x5378A7FF,
//        0x295A29FF, 0x294221FF, 0x212110FF, 0x5A1031FF, 0x942121FF, 0x945A21FF, 0xE76329FF, 0x9C8C29FF, 0xA5CE31FF, 0xE7BD39FF, 0xE7E742FF, 0xB57B6BFF, 0xD684DEFF, 0xEFDEEFFF, 0x295A9CFF, 0x397B63FF,
//        0x4A9CE7FF, 0x31DEB5FF, 0xEFCE8CFF, 0xEF9C73FF, 0xE731CEFF, 0x6B63DEFF, 0x317B21FF, 0x399C31FF, 0x7BB542FF, 0x9CF79CFF, 0x181042FF, 0x211894FF, 0x2929DEFF, 0x2994A5FF, 0x31C639FF, 0x42EF42FF,
//        0xB5F731FF, 0xD69C29FF, 0xDE2139FF, 0xAD21C6FF, 0x6B18B5FF
//};
//
//int[] apolland = {
//        0x00000000, 0x000000FF, 0xFFFFFFFF, 0x6DF7C1FF, 0x11ADC1FF, 0x606C81FF, 0x393457FF, 0x1E8875FF, 0x5BB361FF, 0xA1E55AFF, 0xF7E476FF, 0xF99252FF, 0xCB4D68FF, 0x6A3771FF, 0xC92464FF, 0xF48CB6FF,
//        0xF7B69EFF, 0x6B9C6BFF, 0x102152FF, 0x1818ADFF, 0x2931DEFF, 0x3973DEFF, 0x39C6B5FF, 0x4ADEDEFF, 0x183918FF, 0x295A18FF, 0x318421FF, 0x31A521FF, 0x39DE39FF, 0x9CDE94FF, 0x4A2921FF, 0x734A4AFF,
//        0xA56B52FF, 0xC68C7BFF, 0xADB58CFF, 0xDED6CEFF, 0x391010FF, 0x731818FF, 0x845221FF, 0x947B21FF, 0xADA529FF, 0xDEBD31FF, 0x290842FF, 0x521042FF, 0x8C1052FF, 0xAD2121FF, 0xE72929FF, 0xE76B31FF,
//        0x101073FF, 0x4A108CFF, 0x6B21CEFF, 0x9C29C6FF, 0xDE29CEFF, 0xCE6BD6FF, 0x080831FF, 0x101010FF, 0x102110FF, 0x183139FF, 0x21527BFF, 0x317342FF, 0x848CCEFF, 0x8CB5DEFF, 0xD6BDE7FF, 0xC6EFDEFF
//};
//int[] zygodactyl = {
//        0x00000000, 0xC37F75FF, 0x8A3F39FF, 0xFF6451FF, 0xD8000BFF, 0xDFC09AFF, 0x9A7D56FF, 0xFFC262FF,
//        0xDC8C00FF, 0xF7FAC0FF, 0xACB16EFF, 0xF5FF64FF, 0xD2DC00FF, 0x7BA17AFF, 0x3B683FFF, 0x60C55AFF,
//        0x098A00FF, 0x4466A9FF, 0x132E76FF, 0x276EFFFF, 0x062FADFF, 0x8F7DB6FF, 0x564383FF, 0xB377FFFF,
//        0x7F00F7FF, 0xFF8548FF, 0xAA5327FF, 0xFDDD5FFF, 0xAC9637FF, 0xA5DB53FF, 0x69922DFF, 0x008DB8FF,
//        0x00516FFF, 0x6459FFFF, 0x372AA5FF, 0xCF64A4FF, 0x813663FF, };
//int[] talon = {
//        0x00000000, 0xE80071FF, 0xFF256EFF, 0xF52B3DFF, 0xB6361EFF, 0xEF5400FF, 0xAD5400FF, 0xCF7E27FF,
//        0x9A6D28FF, 0xC29500FF, 0x91800FFF, 0x676916FF, 0x77962AFF, 0x4A7E2AFF, 0x0DB335FF, 0x188E53FF,
//        0x2FB58CFF, 0x339281FF, 0x00746FFF, 0x269BA5FF, 0x27798BFF, 0x439FC3FF, 0x007FBCFF, 0x1BA1FFFF,
//        0x2576FFFF, 0x343DFFFF, 0x7D14FFFF, 0x7B24FFFF, 0xBF3BFFFF, 0xA838D6FF, 0xFF02FFFF, 0xDA21B2FF,
//        0xAD2475FF,
//};
//int[] swoop = {
//        0x00000000, 0xF24848FF, 0xFD3406FF, 0xFA9152FF, 0xF49820FF, 0xF5D269FF, 0xFDF029FF, 0xEAFB74FF,
//        0xBEF642FF, 0x81EF12FF, 0x84FE4CFF, 0x36F91AFF, 0x64F86DFF, 0x33F263FF, 0x70FEAEFF, 0x3DFAB3FF,
//        0x0CF5C9FF, 0x55F4F4FF, 0x14D2FEFF, 0x5FC1FBFF, 0x2E85F6FF, 0x7696F6FF, 0x4651F0FF, 0x2305FAFF,
//        0x8450F8FF, 0x881FF2FF, 0xC767F3FF, 0xE028FBFF, 0xF972F1FF, 0xF440C7FF, 0xF588C5FF, 0xFC4A8DFF,
//        0xF71942FF,
//};
//
//
//        int[] hype31 = {
//            0x00000000, 0x000000FF, 0x515B57FF, 0xA8A09BFF, 0xC4C5C0FF, 0xFFFFFFFF, 0x4C0014FF, 0xFF0000FF,
//                    0xAF2100FF, 0xF07E62FF, 0xFFFF00FF, 0x9BD37EFF, 0x00FF00FF, 0x00FFFFFF, 0x119BAEFF, 0x9EF0FFFF,
//                    0x36C5FFFF, 0x0000FFFF, 0x404F9AFF, 0x342984FF, 0x6348CFFF, 0x7847FFFF, 0x9C79DDFF, 0xE0ADFBFF,
//                    0x613172FF, 0xFF00FFFF, 0xC332B3FF, 0x871966FF, 0x9C6080FF, 0xEF179CFF, 0xF367A7FF, 0x670D36FF,
//        };
//
//        int[] judo31 = {
//                0x00000000, 0x292826FF, 0x363C43FF, 0x55504CFF, 0x57615DFF, 0x696E6FFF, 0x798486FF, 0xA9A6A0FF,
//                0xBFB4ABFF, 0xD7D2CBFF, 0xFAF5F2FF, 0xB03A48FF, 0xAF582FFF, 0xD4804DFF, 0xE0C872FF, 0x849867FF,
//                0x71D372FF, 0x51F55CFF, 0x45BE81FF, 0x7ED7FBFF, 0x5AB5F8FF, 0x0062EBFF, 0x384497FF, 0x8377B2FF,
//                0x6A3D93FF, 0xE5BDF0FF, 0xBB04A4FF, 0xCB63AEFF, 0x8D1D73FF, 0xA16683FF, 0xE090B5FF, 0xFA408DFF,
//        };

//                Coloring.HALTONIC255;
//                new int[]
//                { // halturvy
//                        0x00000000, 0x010101FF, 0xFEFEFEFF, 0x777777FF, 0x555555FF, 0xAAAAAAFF, 0x333333FF, 0xE0E0E0FF,
//                        0xC8C8C8FF, 0x563C18FF, 0x5076DDFF, 0x79303DFF, 0xAA8ECEFF, 0x1B295FFF, 0xD6F77EFF, 0x20C93AFF,
//                        0x9F6BD9FF, 0x5A6862FF, 0x6CA557FF, 0x2F0921FF, 0xC42784FF, 0x68208FFF, 0xFC8962FF, 0x3A1F29FF,
//                        0xF86FB2FF, 0x70E2B5FF, 0x4B1849FF, 0xA96A38FF, 0x91574BFF, 0xFA95E9FF, 0x1B8577FF, 0xF7441FFF,
//                        0xC5D04DFF, 0x0B151EFF, 0x9B867DFF, 0x171C3EFF, 0xAA27D8FF, 0x106839FF, 0x105346FF, 0xA2A84EFF,
//                        0x89CC48FF, 0x6E59B2FF, 0x1E53C7FF, 0x372FD0FF, 0x90B9F9FF, 0x6F3E97FF, 0x25BAD1FF, 0xDF3447FF,
//                        0x5339FFFF, 0x259ADDFF, 0xFB6A52FF, 0x591F16FF, 0x353C83FF, 0x48881AFF, 0xEC37B4FF, 0xF873F9FF,
//                        0xD01412FF, 0x6823DEFF, 0xEED17AFF, 0x9D3649FF, 0xA544FFFF, 0xF3AE55FF, 0xD2608EFF, 0x74FF6CFF,
//                        0x661A4FFF, 0x8B4719FF, 0x3A13A6FF, 0xDC24FFFF, 0x1EADA5FF, 0x080804FF, 0x7353F4FF, 0x66671AFF,
//                        0x599159FF, 0x152D1EFF, 0x8D1E78FF, 0x131F14FF, 0x27D6AAFF, 0xB85488FF, 0x31F9EAFF, 0x007D28FF,
//                        0xD310D1FF, 0x174353FF, 0xC36EFEFF, 0x8E32AFFF, 0xC395EFFF, 0xCC7F3FFF, 0x9A1F17FF, 0x3573AAFF,
//                        0x2A4212FF, 0x37EB57FF, 0xE4A4A6FF, 0x382771FF, 0x1B050AFF, 0x820B16FF, 0x508AB4FF, 0xF32D76FF,
//                        0x0A0B45FF, 0xA5C4A0FF, 0xEEB3FFFF, 0x47540AFF, 0xD1A828FF, 0xB84E1CFF, 0xF853ECFF, 0xA1F2BBFF,
//                        0xAB197DFF, 0xD7FBDAFF, 0x1C547DFF, 0x6C87FFFF, 0xCA8187FF, 0x52D5EDFF, 0x824E7AFF, 0x300B5EFF,
//                        0x0B6876FF, 0x19C28DFF, 0x925EBEFF, 0x00A648FF, 0x001074FF, 0x2660EBFF, 0x9C852CFF, 0x090121FF,
//                        0x51436FFF, 0x5EA7F8FF, 0x822EF3FF, 0x828AC5FF, 0x92A093FF, 0xFAFF23FF, 0x130FA2FF, 0x95759DFF,
//                        0x856B2EFF, 0x112FB8FF, 0x0C30FEFF, 0x26B71DFF, 0x820CB6FF, 0x00DD34FF, 0x8B5F84FF, 0xCE6BC2FF,
//                        0xD4E22FFF, 0x4A3952FF, 0x9CE0FCFF, 0xFA51A3FF, 0x500ABDFF, 0x6E4416FF, 0x495D99FF, 0xB7445AFF,
//                        0xF08112FF, 0x5A0B89FF, 0x7F0F67FF, 0x0E08F6FF, 0xCE6957FF, 0x301D06FF, 0x003914FF, 0x3E0533FF,
//                        0xC14CC0FF, 0x783F62FF, 0x300A81FF, 0xBE1B54FF, 0xF8E19DFF, 0xDC259AFF, 0x9A48A5FF, 0xFC4966FF,
//                        0xFDB29CFF, 0x6DC1C6FF, 0x009D96FF, 0x005415FF, 0x00000DFF, 0xC79976FF, 0x00FE2AFF, 0x87FFFFFF,
//                        0x3E47A9FF, 0xB4190DFF, 0x584ACDFF, 0xBDFE20FF, 0x78C188FF, 0xF7FF9AFF, 0x2CF79DFF, 0xD38FACFF,
//                        0x240F06FF, 0x00358AFF, 0x200424FF, 0x530C14FF, 0x585C2DFF, 0x867C1EFF, 0xC7B5E9FF, 0xFBC8B8FF,
//                        0x007960FF, 0x961B4BFF, 0xC159EEFF, 0x7866FFFF, 0xA89617FF, 0xFA2CE3FF, 0x4A4B44FF, 0xF48AC0FF,
//                        0xD25311FF, 0x342C11FF, 0xFCC21FFF, 0x00100AFF, 0x070832FF, 0xB219ADFF, 0x98E521FF, 0x0E87FFFF,
//                        0x18C1FFFF, 0xD5CFFCFF, 0x602A31FF, 0x132942FF, 0xC4AE7DFF, 0x75B124FF, 0x6D9A19FF, 0xD71259FF,
//                        0x6998A2FF, 0x620A37FF, 0x4F7A41FF, 0xA9420DFF, 0x0E5E5EFF, 0x6770B2FF, 0xBAD19AFF, 0xCFBB17FF,
//                        0x0085B3FF, 0x58066BFF, 0x240545FF, 0x631AC1FF, 0x5AA6C9FF, 0x4C0CFBFF, 0x888063FF, 0xF9EBFFFF,
//                        0x90BB25FF, 0x00EAFFFF, 0x48330EFF, 0x9EE78FFF, 0xD67BE9FF, 0x63DD86FF, 0xB95E5CFF, 0x92AAE5FF,
//                        0x4B5083FF, 0xF6E15BFF, 0x000E5EFF, 0x1100C7FF, 0x775451FF, 0x3F8C8BFF, 0xA97CA8FF, 0x452D50FF,
//                        0x004BFBFF, 0x184B69FF, 0x156EFAFF, 0x16152FFF, 0xF99428FF, 0x6F7DD9FF, 0x00395EFF, 0xB73DB9FF,
//                        0x460A07FF, 0x592A73FF, 0x20D271FF, 0x004039FF, 0x95CDFFFF, 0x7B413DFF, 0x9B0AD3FF, 0xEC6433FF,
//                };
//                { // haltok
//                        0x00000000, 0x010101FF, 0xFEFEFEFF, 0x777777FF, 0x555555FF, 0xAAAAAAFF, 0x333333FF, 0xE0E0E0FF,
//                        0xC8C8C8FF, 0x92072EFF, 0xBA81E2FF, 0x1B2076FF, 0xCEFE27FF, 0xAE54FCFF, 0x576A5EFF, 0x0A5D9BFF,
//                        0x5CAB26FF, 0x538E5DFF, 0x461425FF, 0x24EEA3FF, 0xAB4633FF, 0x0A1420FF, 0x55358FFF, 0xE7D05EFF,
//                        0xC210D3FF, 0xAB8071FF, 0x18174BFF, 0xE060B7FF, 0xB99CFEFF, 0xFD4A3FFF, 0x7947D2FF, 0xA1D363FF,
//                        0x598BB6FF, 0x581F61FF, 0x7D26B0FF, 0xB96079FF, 0x2A5F34FF, 0xC62765FF, 0x81F981FF, 0xD15D19FF,
//                        0xFA757FFF, 0x19A4EDFF, 0x2E4F6BFF, 0x4966A2FF, 0x3D31CDFF, 0x31D2E8FF, 0x9A3D74FF, 0x5972F5FF,
//                        0x411AA7FF, 0xEBA239FF, 0xF908DBFF, 0xEF9FA0FF, 0xFEA1E0FF, 0x627D15FF, 0xE18823FF, 0xEFBFFDFF,
//                        0xDD303FFF, 0x280C29FF, 0x69BA94FF, 0x923824FF, 0x7E975DFF, 0x4C4220FF, 0x120B0CFF, 0x132A47FF,
//                        0x6EC03BFF, 0x151F06FF, 0xF073F4FF, 0x8965AFFF, 0x053685FF, 0xD5348BFF, 0x3C63ECFF, 0x682825FF,
//                        0x8D2863FF, 0x4CB9F3FF, 0x2842F5FF, 0x7283F3FF, 0xBE8C97FF, 0x7C6311FF, 0x74F7E1FF, 0x080107FF,
//                        0x6DA1A5FF, 0x232D0EFF, 0x089D06FF, 0x1E83A7FF, 0x603657FF, 0xDCF7AEFF, 0x4CEC3AFF, 0x9A10FDFF,
//                        0x9F6A3BFF, 0x361209FF, 0x692BEBFF, 0x5D0E36FF, 0xF64BFAFF, 0x297538FF, 0xA843A9FF, 0x380652FF,
//                        0x0B4624FF, 0xE64980FF, 0x704995FF, 0x9052E5FF, 0xB8A838FF, 0xC8BB8DFF, 0x674A0CFF, 0xAA70BDFF,
//                        0x1B4450FF, 0x0EA984FF, 0xC87B1CFF, 0xB8B2DDFF, 0x27D596FF, 0x879ED8FF, 0xDC89BDFF, 0x12550DFF,
//                        0x0C0476FF, 0x258063FF, 0x65E2DAFF, 0xA45571FF, 0x270B05FF, 0x112AC8FF, 0xAE0D40FF, 0xA31BAAFF,
//                        0x19D931FF, 0x7D0B6AFF, 0x987F1AFF, 0x0B034DFF, 0x480E5FFF, 0xFEDF6EFF, 0xA69A1BFF, 0xD346BAFF,
//                        0x055ECCFF, 0xC3FDFAFF, 0x1949A3FF, 0x06021BFF, 0xC463FDFF, 0xF4B623FF, 0x200CADFF, 0x3A1A83FF,
//                        0x6D03ADFF, 0x815795FF, 0xF3CFA5FF, 0xC0E110FF, 0x0C26FEFF, 0x4D2301FF, 0x7F5258FF, 0xD00CFCFF,
//                        0xAFBE05FF, 0xFE6518FF, 0xFEB591FF, 0xDC7065FF, 0xDE957AFF, 0xFF87E8FF, 0x7E3010FF, 0xD21226FF,
//                        0xA6DEF6FF, 0x1BBB6DFF, 0x60FD1EFF, 0xFEFC65FF, 0x4B49BBFF, 0x12355CFF, 0x650BD9FF, 0xFF32A5FF,
//                        0x5E5D22FF, 0xA4DC9DFF, 0x27685AFF, 0x3D3667FF, 0xFE577EFF, 0xA90274FF, 0x1B2427FF, 0x098EF4FF,
//                        0x4C4C85FF, 0x089998FF, 0x958BB9FF, 0x721546FF, 0x443701FF, 0x65098AFF, 0x753D4CFF, 0x093B0FFF,
//                        0x99C079FF, 0x9AA171FF, 0x09B8C7FF, 0xC4039EFF, 0x99C8FBFF, 0xFF1D42FF, 0x105346FF, 0x0AC217FF,
//                        0xFB67BBFF, 0xBCEAA5FF, 0x060630FF, 0x8F7A98FF, 0x6D9522FF, 0x390D2EFF, 0x16830AFF, 0x87C2B8FF,
//                        0x83645FFF, 0x0A7AD8FF, 0x1B0220FF, 0x524843FF, 0x050A02FF, 0x8F08D8FF, 0x870B8AFF, 0x087583FF,
//                        0xC44A13FF, 0x4E46FDFF, 0xB355A8FF, 0x091C2FFF, 0x690B0AFF, 0x898264FF, 0x595A7BFF, 0x4B3240FF,
//                        0x274185FF, 0x7BD5A5FF, 0x051601FF, 0xFEFDC0FF, 0x914B14FF, 0x372246FF, 0x09CAC5FF, 0x8F69DEFF,
//                        0x099037FF, 0x576FB4FF, 0x597184FF, 0x09A64FFF, 0x4D10FDFF, 0xFDE7FEFF, 0xA6FF9AFF, 0x5107C5FF,
//                        0xD85C5AFF, 0x266B0FFF, 0x8A8DFCFF, 0xD73DFCFF, 0x6C51FDFF, 0x713A84FF, 0xB81E12FF, 0xC86990FF,
//                        0x78918EFF, 0xF90873FF, 0xFF849BFF, 0xCFEC50FF, 0xD91BB9FF, 0x56DC5FFF, 0x73794DFF, 0xFC8A3AFF,
//                        0xFFA169FF, 0x26A1BFFF, 0xB643DAFF, 0x7BBFFAFF, 0x3B1F0BFF, 0xAA0FD0FF, 0x5656C5FF, 0x870802FF,
//                        0x3F2958FF, 0x85E966FF, 0xD4B6FCFF, 0xBF8B58FF, 0xB06E56FF, 0xA35A0BFF, 0x0EFDB6FF, 0x26C87EFF,
//                };
//                { // haltoyo
//                        0x00000000, 0x010101FF, 0xFEFEFEFF, 0x777777FF, 0x555555FF, 0xAAAAAAFF, 0x333333FF, 0xE0E0E0FF,
//                        0xC8C8C8FF, 0x4972F1FF, 0x822638FF, 0xB189D3FF, 0x192767FF, 0xCFFB6EFF, 0xA464E3FF, 0x556A62FF,
//                        0x64A84AFF, 0x6C1397FF, 0x3F1B29FF, 0x56E8AFFF, 0x4E1050FF, 0xB06728FF, 0x3F4511FF, 0x995245FF,
//                        0xC2D22BFF, 0x0B151EFF, 0x4E3E83FF, 0xB33AC1FF, 0x9F847DFF, 0x161B41FF, 0xA4A934FF, 0xE46254FF,
//                        0x82CF34FF, 0x7253C0FF, 0x004FDBFF, 0x638AACFF, 0x3B1EE2FF, 0xFB47E7FF, 0xA52D96FF, 0x74389FFF,
//                        0xED1740FF, 0xE493D3FF, 0x601708FF, 0x3B1EADFF, 0xF81AB8FF, 0x93F29DFF, 0xE3838BFF, 0x43A3DCFF,
//                        0xF5CF62FF, 0x9E5FA0FF, 0x5D7B1EFF, 0xA82A44FF, 0x5BCEE2FF, 0xDAA95CFF, 0x68EF3FFF, 0x5E2141FF,
//                        0x209462FF, 0x912AF2FF, 0xD18F49FF, 0x426217FF, 0x333870FF, 0x0F2E1EFF, 0x0F4A51FF, 0x151F10FF,
//                        0x06041DFF, 0x4D89FDFF, 0xCB223AFF, 0x196BB7FF, 0x7E4D21FF, 0x7D8930FF, 0x87C486FF, 0x521186FF,
//                        0xA4B0FCFF, 0x4BBBA3FF, 0x070307FF, 0x5DAFF8FF, 0xEF4A8AFF, 0x1F618BFF, 0x6C16FFFF, 0xD037EFFF,
//                        0x2E0731FF, 0x2800A5FF, 0x735177FF, 0x3C57FBFF, 0xD5258CFF, 0x59EFF8FF, 0xBB506CFF, 0x00421BFF,
//                        0xE36CB3FF, 0x5B4531FF, 0x50C01CFF, 0x8B1379FF, 0xF7A3B2FF, 0xD3FDD3FF, 0xF06EF8FF, 0x0082C1FF,
//                        0x137F82FF, 0x009F1DFF, 0xE0AEFFFF, 0x91A288FF, 0x6B2067FF, 0x2DA190FF, 0xFAB46BFF, 0x240607FF,
//                        0x0F0B05FF, 0x005B2EFF, 0xA18E2AFF, 0x007548FF, 0xB6EB30FF, 0x0A08E3FF, 0x924CF5FF, 0x120177FF,
//                        0x090742FF, 0x84FCFCFF, 0xBD6A86FF, 0x0E42B2FF, 0x331359FF, 0xFDC3FEFF, 0xDA522CFF, 0x6312CBFF,
//                        0xBC68FDFF, 0x656EB1FF, 0x095179FF, 0x00DF8FFF, 0x59331BFF, 0x380911FF, 0x7B0E14FF, 0x8727C9FF,
//                        0xFC703FFF, 0x7A3D66FF, 0x8683D3FF, 0x8A6825FF, 0x972A19FF, 0xBF491DFF, 0x8E5488FF, 0xA6D09BFF,
//                        0xC67315FF, 0xCA4BB3FF, 0xF89179FF, 0xF9FE92FF, 0x4E53B3FF, 0x00CE7BFF, 0x372A09FF, 0xDCE7A2FF,
//                        0x3C1079FF, 0xBE0D66FF, 0x5E6A1AFF, 0x00005EFF, 0xB0BCBDFF, 0x523B52FF, 0x16071FFF, 0xF9384CFF,
//                        0xFA8A21FF, 0xBE8FFFFF, 0x00E41DFF, 0x00675CFF, 0xBB15F7FF, 0xF8C7BDFF, 0x00B112FF, 0x4940B1FF,
//                        0xBB8597FF, 0xFAFF23FF, 0xEFE429FF, 0xA911CAFF, 0x930EA3FF, 0x3D2CFEFF, 0x00909CFF, 0xFB88FFFF,
//                        0xB972C4FF, 0x2D1F0DFF, 0x052949FF, 0xB7B72CFF, 0x7AD7FFFF, 0x080695FF, 0x668D76FF, 0x9D2374FF,
//                        0xDB54CCFF, 0xB2DFC4FF, 0xF02178FF, 0x008E25FF, 0x0A395FFF, 0xE5B51BFF, 0xFA6376FF, 0x7A73CDFF,
//                        0xD616CEFF, 0xF977BDFF, 0x7597AAFF, 0xC0D4FFFF, 0xB03707FF, 0x7696F9FF, 0x59669AFF, 0x0098D9FF,
//                        0x9A174CFF, 0x11BD75FF, 0xFCEAF2FF, 0x003197FF, 0x3C2B5DFF, 0x8AA1C3FF, 0x0DAFB3FF, 0x18CFB7FF,
//                        0x2D5650FF, 0x4AFF80FF, 0x4E4E87FF, 0xEF18FFFF, 0x3D043AFF, 0x41350DFF, 0x675BE9FF, 0x99645BFF,
//                        0x008017FF, 0x00FFD2FF, 0xB14085FF, 0x648155FF, 0x5645E3FF, 0x7DDD6CFF, 0x3A3B45FF, 0x609C17FF,
//                        0x7D0C41FF, 0x00D41BFF, 0x495316FF, 0x967D58FF, 0xC1835BFF, 0x1C0C2DFF, 0x0008C7FF, 0xB3A86EFF,
//                        0x9BFFC5FF, 0x00C1DCFF, 0x732F14FF, 0xC215A4FF, 0x001506FF, 0x8D75A0FF, 0x5B1131FF, 0xAAC1F9FF,
//                        0xFAB5DFFF, 0x006EE5FF, 0x4B2CACFF, 0x372545FF, 0xD8175FFF, 0x7D5D31FF, 0x7A9B73FF, 0x526242FF,
//                        0x7968FCFF, 0x5F0C62FF, 0x0087E6FF, 0x9847AFFF, 0x68BD68FF, 0xB5DC8CFF, 0x5D455CFF, 0x0056B0FF,
//                        0x5E30DAFF, 0xDC7914FF, 0x944567FF, 0x502B85FF, 0x53090DFF, 0x9DA0E6FF, 0xD077EAFF, 0xFD49B3FF,
//                };
//                        { // haltesque
//                                0x00000000, 0x000000FF, 0xFFFFFFFF, 0x888888FF, 0x444444FF, 0xCCCCCCFF, 0x222222FF, 0xAAAAAAFF,
//                                0x666666FF, 0xEEEEEEFF, 0x111111FF, 0x999999FF, 0x555555FF, 0xDDDDDDFF, 0x333333FF, 0xBBBBBBFF,
//                                0x777777FF, 0x9F4026FF, 0x5578CEFF, 0x73353DFF, 0xA21DCFFF, 0xD4F695FF, 0x47C453FF, 0x9773CBFF,
//                                0x26D0D8FF, 0x2A2877FF, 0x73A264FF, 0xB93980FF, 0x622D83FF, 0xED9170FF, 0xE97BB2FF, 0xDD33BDFF,
//                                0x176AE1FF, 0x98234AFF, 0x8095E8FF, 0xEE9DE4FF, 0xE5573BFF, 0xC3CF67FF, 0x12569AFF, 0xBE7BA9FF,
//                                0xD5841AFF, 0xBC24FCFF, 0x94C860FF, 0xDA3D19FF, 0x6E5DA4FF, 0x10050FFF, 0x3A3AB9FF, 0x100D6DFF,
//                                0x49304FFF, 0x09A64FFF, 0x68478AFF, 0x355219FF, 0x5247E9FF, 0x711943FF, 0xEB7466FF, 0xF2AB4AFF,
//                                0xEE4281FF, 0x4C8635FF, 0xAA7357FF, 0xF962FFFF, 0xC752F9FF, 0x0B1146FF, 0x00E7B7FF, 0x40105FFF,
//                                0xB0A836FF, 0x147997FF, 0x4D1324FF, 0x9CEE3BFF, 0xB49AE8FF, 0x9D396EFF, 0x816126FF, 0xA3554AFF,
//                                0x931CA1FF, 0x2B0E14FF, 0x261FC3FF, 0x0698F2FF, 0x006D3CFF, 0x7EBAFCFF, 0x33094AFF, 0x1A3E0BFF,
//                                0x6EF3BBFF, 0xAF5C84FF, 0x4D1A87FF, 0xC5FD22FF, 0x704D13FF, 0x45E8FFFF, 0xBC79EAFF, 0x6F12BEFF,
//                                0xF7CE82FF, 0x0691AEFF, 0x40D732FF, 0x002F0CFF, 0x2EB2C9FF, 0x7747F9FF, 0x2F4283FF, 0xE2285DFF,
//                                0x0045E4FF, 0x56390EFF, 0x7564FEFF, 0xC6153BFF, 0x2762B4FF, 0x621B13FF, 0xEB52C0FF, 0x157860FF,
//                                0x1B7F17FF, 0xA74EBBFF, 0x79FFF0FF, 0xF71AEFFF, 0x20C8A4FF, 0x938D25FF, 0x020302FF, 0x1E2448FF,
//                                0x40ED4FFF, 0x4B06F9FF, 0x851E74FF, 0xF7B39BFF, 0xFDB7FCFF, 0x001D0CFF, 0x000534FF, 0x00687BFF,
//                                0x8B7223FF, 0x530CB9FF, 0x618F65FF, 0xEED415FF, 0x590D5FFF, 0xC920B1FF, 0x143F62FF, 0xB6856CFF,
//                                0x352807FF, 0x793AC7FF, 0x140FABFF, 0x391025FF, 0x30A3A4FF, 0x220786FF, 0x004D0EFF, 0x922F0FFF,
//                                0x1000FEFF, 0xC1BBFFFF, 0x76AE0BFF, 0x105569FF, 0x75B188FF, 0xFBFBAFFF, 0x1B0B2CFF, 0x830D17FF,
//                                0xC06B82FF, 0xF9FD43FF, 0xB40E95FF, 0xBEB06FFF, 0x5C7FFFFF, 0x20897AFF, 0x7C4C58FF, 0xEA85EBFF,
//                                0x6D00FCFF, 0xF390B1FF, 0xE59520FF, 0xF95E91FF, 0x5AADFCFF, 0x159918FF, 0x74D0FBFF, 0x54466DFF,
//                                0x8168A9FF, 0x474BBBFF, 0x95D8B2FF, 0x32FF19FF, 0xFD192AFF, 0x00B977FF, 0xA358ECFF, 0x5D6314FF,
//                                0xFCE43DFF, 0x113496FF, 0xBEE887FF, 0xC27615FF, 0x5D8BC3FF, 0x891048FF, 0x6A106FFF, 0x00FF8CFF,
//                                0x0C453AFF, 0x9FD625FF, 0x9544A6FF, 0xBC996DFF, 0x5D7759FF, 0xB21420FF, 0x0B305BFF, 0x00D98BFF,
//                                0x82C6A7FF, 0xC55EB5FF, 0xB35D18FF, 0x00B417FF, 0x9A6FFFFF, 0x610836FF, 0x91557EFF, 0xFB5F22FF,
//                                0x003235FF, 0x0A6047FF, 0x5B4626FF, 0xBD3B14FF, 0x861BFBFF, 0xEC1A8AFF, 0x75E882FF, 0xFABC2BFF,
//                                0x000904FF, 0xF8E0ABFF, 0xA30D76FF, 0x3E5E12FF, 0xEA4FFFFF, 0x2C0433FF, 0x0075FFFF, 0x412544FF,
//                                0x58355DFF, 0x6162D5FF, 0x4D5E8AFF, 0xA29927FF, 0x00260FFF, 0x44340DFF, 0xC593A4FF, 0x240607FF,
//                                0xFC9D89FF, 0x9E29F9FF, 0x62BBCCFF, 0x94749CFF, 0xFE4D5CFF, 0xFEC6BEFF, 0xB9A8FFFF, 0x7DFF86FF,
//                                0xC7B622FF, 0xFB5FCEFF, 0x5E7519FF, 0x678F1AFF, 0x17031EFF, 0xC55A58FF, 0x9DE1FEFF, 0x0655FFFF,
//                                0x8A8DB8FF, 0x001D2CFF, 0xFB7A25FF, 0xDD142BFF, 0xFC28ACFF, 0x89C118FF, 0xD90CFFFF, 0x3D04E1FF,
//                                0x0087EDFF, 0x421509FF, 0x3605ADFF, 0x753E65FF, 0xFBCEFFFF, 0x001E49FF, 0xF6B0D3FF, 0xC7469DFF,
//                                0x5D3239FF, 0x000018FF, 0xBF445DFF, 0x393377FF, 0x457EA7FF, 0x9E7A18FF, 0xBAFFD8FF, 0xBF116CFF,
//                        };
//                        { // surin
//                                0x00000000, 0x000000FF, 0x141414FF, 0xFFFFFFFF, 0x878787FF, 0xCCCCCCFF, 0x4F4F4FFF, 0xEEEEEEFF,
//                                0x282828FF, 0x999999FF, 0x757575FF, 0xDDDDDDFF, 0x3B3B3BFF, 0xBBBBBBFF, 0x626262FF, 0xAAAAAAFF,
//                                0x9B9783FF, 0x514E3DFF, 0xE10788FF, 0xDC8EA1FF, 0xA55F72FF, 0x5E2637FF, 0xF7419BFF, 0x9E0C5BFF,
//                                0x7C706BFF, 0x39302DFF, 0x943907FF, 0xAA755EFF, 0x794B37FF, 0x3A1706FF, 0xAA512AFF, 0x602400FF,
//                                0xE09A8BFF, 0x884F44FF, 0xDC6D00FF, 0xFDAA7CFF, 0xE06719FF, 0x7C3603FF, 0xFF811DFF, 0xA15013FF,
//                                0xECA992FF, 0x945D4AFF, 0xFF6B03FF, 0xFFBE9EFF, 0xEE763DFF, 0x913C07FF, 0xFF9664FF, 0xC15000FF,
//                                0xC09C84FF, 0x6F523EFF, 0xFF3107FF, 0xFF9779FF, 0xCD633FFF, 0x7E2400FF, 0xFF6B4EFF, 0xB52800FF,
//                                0xE9BB63FF, 0x916A13FF, 0xFF6B8EFF, 0xFFC8A5FF, 0xD78C59FF, 0x894A1BFF, 0xFE9C96FF, 0xC74F4EFF,
//                                0xCAC0B2FF, 0x797165FF, 0xFF6F84FF, 0xFFC4C4FF, 0xDA878AFF, 0x8B464AFF, 0xFF9BA3FF, 0xCC475EFF,
//                                0xEEBC98FF, 0x956C4DFF, 0xFF7C64FF, 0xFFCEBDFF, 0xDB9071FF, 0x8D4E33FF, 0xFFA68FFF, 0xC35E47FF,
//                                0xE6CAB3FF, 0x917965FF, 0xF88D7EFF, 0xFEDBCCFF, 0xD79F8CFF, 0x8A5B4BFF, 0xFEB5A5FF, 0xBC6E60FF,
//                                0xE7D7A1FF, 0x928355FF, 0xE79BBAFF, 0xFEE5DAFF, 0xD3AA99FF, 0x876556FF, 0xFCBBC3FF, 0xB27A81FF,
//                                0xBCD68FFF, 0x6C8145FF, 0xF767FDFF, 0xE5DBCCFF, 0xAEA698FF, 0x696156FF, 0xEDA7E5FF, 0xA5689EFF,
//                                0x6A945EFF, 0x294A1FFF, 0x9D00E1FF, 0xAC80D6FF, 0x7B53A0FF, 0x3E1B5BFF, 0xB335FFFF, 0x690B99FF,
//                                0x7AAA6AFF, 0x365E28FF, 0xB725FFFF, 0xD08BFFFF, 0x995ACFFF, 0x561A81FF, 0xC261FFFF, 0x830CBDFF,
//                                0x507A5EFF, 0x133722FF, 0x6410D3FF, 0x6E78BCFF, 0x464C88FF, 0x181747FF, 0x6D45DEFF, 0x3D008CFF,
//                                0x739B83FF, 0x2F513EFF, 0x7B44FFFF, 0x849EE5FF, 0x586EADFF, 0x233266FF, 0x866EFFFF, 0x5203DCFF,
//                                0x7FB98AFF, 0x386A43FF, 0xA162FFFF, 0xA5B9EAFF, 0x7688B5FF, 0x3A486DFF, 0xAB8BFFFF, 0x6D40D3FF,
//                                0x90CCAFFF, 0x457961FF, 0x958AFDFF, 0xB6D2FDFF, 0x7B9AD8FF, 0x3D578BFF, 0xA6ACFFFF, 0x6264DDFF,
//                                0x508B6BFF, 0x0C442CFF, 0x6A10FDFF, 0x6191B8FF, 0x386487FF, 0x002B46FF, 0x635EEBFF, 0x3622A1FF,
//                                0x659FADFF, 0x21535FFF, 0x0080BAFF, 0x4FB3DBFF, 0x1B81A5FF, 0x103E53FF, 0x139AD5FF, 0x065A7DFF,
//                                0x94BAD4FF, 0x4B6B81FF, 0x00AAC5FF, 0x5EDBFFFF, 0x25A5C9FF, 0x055D70FF, 0x26C3E6FF, 0x057D95FF,
//                                0x9DC1EFFF, 0x527198FF, 0x1CB6B9FF, 0x6EE6FFFF, 0x10B3CFFF, 0x026674FF, 0x1FD1E0FF, 0x00898FFF,
//                                0x707DD4FF, 0x32387EFF, 0x197A62FF, 0x6898D8FF, 0x3E6AA3FF, 0x072E5DFF, 0x278DA1FF, 0x114F5AFF,
//                                0x869BEFFF, 0x425196FF, 0x179982FF, 0x5CC1E9FF, 0x2B8FB4FF, 0x114A5FFF, 0x00B3B0FF, 0x116D6BFF,
//                                0xB898E7FF, 0x694D8FFF, 0x00AA3BFF, 0x92C7C5FF, 0x629492FF, 0x275250FF, 0x14C560FF, 0x127A3BFF,
//                                0xBD87D6FF, 0x6C3F80FF, 0x4F961CFF, 0x9CBA97FF, 0x6D8868FF, 0x32482EFF, 0x55B31FFF, 0x386C13FF,
//                                0xD3B0E3FF, 0x7F628CFF, 0x5FBA18FF, 0xA6E790FF, 0x75B060FF, 0x376923FF, 0x6DD819FF, 0x468C0DFF,
//                                0x98738BFF, 0x4D3144FF, 0x65690FFF, 0x9D8E71FF, 0x6E6147FF, 0x342915FF, 0x827C31FF, 0x4A4406FF,
//                                0xD47AA4FF, 0x7D3458FF, 0x8E7C13FF, 0xDC9B71FF, 0xA56B45FF, 0x5F300CFF, 0xB88C14FF, 0x6E530AFF,
//                                0xDBA4AAFF, 0x86595EFF, 0xC98800FF, 0xF8B690FF, 0xC08562FF, 0x764527FF, 0xF79617FF, 0x9D600EFF,
//                                0xEAB0CAFF, 0x926278FF, 0xBAA300FF, 0xFDD07DFF, 0xC7993CFF, 0x7B5800FF, 0xDCBA1CFF, 0x917911FF,
//                        };
//                        { // enclave
//                                0x00000000, 0x000000FF, 0xFFFFFFFF, 0x878787FF, 0xCCCCCCFF, 0x4F4F4FFF, 0xEEEEEEFF, 0x282828FF,
//                                0x999999FF, 0x141414FF, 0x757575FF, 0xDDDDDDFF, 0x3B3B3BFF, 0xBBBBBBFF, 0x626262FF, 0xAAAAAAFF,
//                                0xA48087FF, 0xFF3472FF, 0xFFB6C9FF, 0xB97586FF, 0x763E4DFF, 0xFF91B1FF, 0xD8607FFF, 0xA13655FF,
//                                0xB99193FF, 0xFF6673FF, 0xFFCED0FF, 0xC88B8DFF, 0x845053FF, 0xFFADB7FF, 0xE17C86FF, 0xA94F59FF,
//                                0xB08784FF, 0xFD5744FF, 0xFFBDB2FF, 0xCA7B72FF, 0x84433CFF, 0xFF9F8EFF, 0xE16D5FFF, 0xAA4237FF,
//                                0xB79287FF, 0xFF6B34FF, 0xFFD1BCFF, 0xC38D7BFF, 0x805243FF, 0xFFB190FF, 0xDF8062FF, 0xA85339FF,
//                                0xAA8A78FF, 0xE46E0EFF, 0xFFC79EFF, 0xBA8560FF, 0x784B2BFF, 0xFFAD72FF, 0xCD7C45FF, 0x974F19FF,
//                                0xB6997FFF, 0xEA8500FF, 0xFFDCA6FF, 0xC29667FF, 0x805A30FF, 0xFFC071FF, 0xD88D43FF, 0xA36012FF,
//                                0xA19275FF, 0xC78600FF, 0xF1D4A8FF, 0xA99069FF, 0x6B5533FF, 0xE9C075FF, 0xB38E48FF, 0x82611EFF,
//                                0x9F9777FF, 0xB7921AFF, 0xEEDB9EFF, 0xA7965FFF, 0x695A2AFF, 0xE4C771FF, 0xAF9443FF, 0x7E6514FF,
//                                0x8D8C6CFF, 0x9D8B00FF, 0xD3D198FF, 0x8F8D5AFF, 0x555327FF, 0xC5C06CFF, 0x938E40FF, 0x666115FF,
//                                0x909C78FF, 0x95A100FF, 0xD3E4ACFF, 0x8F9E6CFF, 0x556136FF, 0xC2D479FF, 0x91A04CFF, 0x637020FF,
//                                0x7B9071FF, 0x709A00FF, 0xB5D998FF, 0x75955AFF, 0x3E5926FF, 0x9ECD6EFF, 0x6E9840FF, 0x456A14FF,
//                                0x79977BFF, 0x43AA0FFF, 0xAFE2AAFF, 0x6F9C6BFF, 0x385F35FF, 0x8BD779FF, 0x5DA34CFF, 0x337323FF,
//                                0x658C75FF, 0x009E42FF, 0x9CD3A9FF, 0x5E8F6BFF, 0x2A5436FF, 0x72CA87FF, 0x44965BFF, 0x156733FF,
//                                0x6D9785FF, 0x10A871FF, 0x95E4C2FF, 0x569E81FF, 0x1C6148FF, 0x68DAADFF, 0x36A47CFF, 0x007451FF,
//                                0x5F8B7FFF, 0x00987BFF, 0x90D2C0FF, 0x538E7FFF, 0x1D5347FF, 0x6BC6B1FF, 0x3B937FFF, 0x006555FF,
//                                0x5A8B89FF, 0x17958AFF, 0x8BD2CCFF, 0x4D8E89FF, 0x155350FF, 0x64C6BCFF, 0x34928AFF, 0x00655EFF,
//                                0x4E8083FF, 0x008889FF, 0x7CC5C6FF, 0x408383FF, 0x004A4BFF, 0x5AB7BAFF, 0x2B8589FF, 0x00595DFF,
//                                0x588D96FF, 0x0095A6FF, 0x8CD2E1FF, 0x4E8E9BFF, 0x16535EFF, 0x6AC4D4FF, 0x3B91A1FF, 0x006472FF,
//                                0x538190FF, 0x0C87AAFF, 0x84C5E0FF, 0x47829BFF, 0x10495EFF, 0x62B6D4FF, 0x3485A0FF, 0x005971FF,
//                                0x5D879DFF, 0x158BC6FF, 0x8DCBF4FF, 0x5088ACFF, 0x1B4E6DFF, 0x69BCEDFF, 0x3B8AB7FF, 0x045D85FF,
//                                0x597D99FF, 0x197DD0FF, 0x91BEEAFF, 0x557CA3FF, 0x234464FF, 0x6AAEEDFF, 0x3F7DB7FF, 0x145184FF,
//                                0x7389A9FF, 0x3E84FCFF, 0xA1CDFFFF, 0x6389C3FF, 0x2F4E80FF, 0x7DB9FFFF, 0x5187E2FF, 0x2859AAFF,
//                                0x707FA0FF, 0x5071FFFF, 0xA5BFFFFF, 0x677DB9FF, 0x334477FF, 0x88AAFFFF, 0x5C79D7FF, 0x374DA1FF,
//                                0x7B83A6FF, 0x796FFCFF, 0xBBC3FFFF, 0x7A80B5FF, 0x444874FF, 0xA9AAFFFF, 0x7A7AD3FF, 0x514E9EFF,
//                                0x7D789EFF, 0x8956FFFF, 0xC1B0FFFF, 0x8070C0FF, 0x49397DFF, 0xB394FFFF, 0x8364E2FF, 0x5A39ABFF,
//                                0x9587ABFF, 0xB064FBFF, 0xDCC5FFFF, 0x9782BFFF, 0x5C497DFF, 0xD9A7FFFF, 0xA475DDFF, 0x7549A7FF,
//                                0x95809FFF, 0xD22DFFFF, 0xE9B5FFFF, 0xA274B7FF, 0x643D76FF, 0xEE8CFFFF, 0xB85DD9FF, 0x8430A2FF,
//                                0xA587A4FF, 0xFE00F5FF, 0xFFB3FFFF, 0xC172C1FF, 0x7D397FFF, 0xFF7FFFFF, 0xE24EDEFF, 0xAA19A8FF,
//                                0x9F8097FF, 0xFB0DBEFF, 0xFAB6E6FF, 0xB175A0FF, 0x703E63FF, 0xFF8AE2FF, 0xD25BADFF, 0x9B307DFF,
//                                0xB391A3FF, 0xFF5BA5FF, 0xFFCAE9FF, 0xC986A2FF, 0x854C65FF, 0xFFA8DBFF, 0xDF77A7FF, 0xA84C77FF,
//                        };
//                        { // gray15
//                                0x00000000, 0x000000FF, 0x141414FF, 0xFFFFFFFF, 0x878787FF, 0xCCCCCCFF, 0x4F4F4FFF, 0xEEEEEEFF,
//                                0x282828FF, 0x999999FF, 0x757575FF, 0xDDDDDDFF, 0x3B3B3BFF, 0xBBBBBBFF, 0x626262FF, 0xAAAAAAFF,
//                        };

//        palette = new int[64];
//        float[] outer = {
//            0.96f,//NamedColor.AURORA_CARMINE.hue(),
//            0.015f,//NamedColor.AURORA_LIGHT_SKIN_6.hue(),
//            0.013f,//NamedColor.ORANGE.hue(),
//            NamedColor.CW_LIGHT_YELLOW.hue(),
//            NamedColor.CW_GREEN.hue(),
//            NamedColor.CW_LIGHT_CYAN.hue(),
//            NamedColor.CW_SAPPHIRE.hue(),
//            NamedColor.CW_PURPLE.hue()
//        };
//
//        for (int i = 0; i < 7; i++) {
//            palette[i+1] = getInt(floatGetHSV(0.078f, 0.05f, (i+0.5f)/7f, 1f));
//        }
//        for (int i = 0; i < 8; i++) {
//            float sm = 1.0625f, vm = (9.5f + ((i & 3))) * 0.1f;
//            if(i <= 1 || i == 4) sm -= 0.09375f;
//            if(i == 7 || i == 5) sm -= 0.125f;
//            if(i == 6) vm = 0.9875f;
//            if(i == 7) vm = 0.9375f;
//            palette[i+8]    = getInt(floatGetHSV(outer[i], sm * 0.375f, vm * 0.25f, 1f));
//            palette[i+8+8]  = getInt(floatGetHSV(outer[i], sm * 0.3f, vm * 0.4f, 1f));
//            palette[i+8+16] = getInt(floatGetHSV(outer[i], sm * 0.45f, vm * 0.55f, 1f));
//            palette[i+8+24] = getInt(floatGetHSV(outer[i], sm * 0.55f, vm * 0.75f, 1f));
//            palette[i+8+32] = getInt(floatGetHSV(outer[i], sm * 0.4f, vm * 0.9f, 1f));
//            palette[i+8+40] = getInt(floatGetHSV(lerpHue(outer[i], outer[i+1 & 7], 0.4f), sm * 0.5f, vm * 0.475f, 1f));
//            palette[i+8+48] = getInt(floatGetHSV(lerpHue(outer[i], outer[i-1 & 7], 0.4f), sm * 0.35f, vm * 0.65f, 1f));
//        }
        
//        palette = new int[217];
//        for (int r = 0, i = 1; r < 6; r++) {
//            for (int g = 0; g < 6; g++) {
//                for (int b = 0; b < 6; b++) {
//                    palette[i++] = (r * 0x330000 | g * 0x3300 | b * 0x33) << 8 | 0xFF;
//                }
//            }
//        }
//        palette = new int[] {0x080000FF,0x201A0BFF,0x432817FF,0x492910FF,
//                0x234309FF,0x5D4F1EFF,0x9C6B20FF,0xA9220FFF,
//                0x2B347CFF,0x2B7409FF,0xD0CA40FF,0xE8A077FF,
//                0x6A94ABFF,0xD5C4B3FF,0xFCE76EFF,0xFCFAE2FF };

//        palette = Coloring.MANOSSUS256;
//        palette = new int[256];
//        System.arraycopy(Coloring.MANOS64, 0, palette, 0, 64);
//        PaletteReducer reducer = new PaletteReducer(Coloring.MANOS64);
//        long state = 98765432123456789L;
//        IntArray colors = new IntArray(256);
//        colors.addAll(Coloring.MANOS64);
//        int[] items = colors.items;
//
//        for (int i = 1; i < 14; i++) {
//            int color = i * 0x12121200 + 0x111111FF;
//            int found = reducer.reduceSingle(color);
//            if (CIELABConverter.differenceLAB(color, found, 1.0, 1.5, 1.5) > 300)
//            {
//                colors.add(color);
//                reducer.exact(items, colors.size);
//            }
//        }
//        for (int i = 1; i < 5000; i++) {
//            int r = (int)(i * 0xD1B54A32D192ED03L >>> 56), g = (int)(i * 0xABC98388FB8FAC03L >>> 56), b = (int)(i * 0x8CB92BA72F3D8DD7L >>> 56),
//                    color = r << 24 | g << 16 | b << 8 | 0xFF;
//                            int found = reducer.reduceSingle(color);
//                            if (CIELABConverter.differenceLAB(color, found, 1.0, 1.5, 1.5) > 300)
//                            {
//                                colors.add(color);
//                                reducer.exact(items, colors.size);
//                            }
//                            if(colors.size >= 256)
//                                break;
//        }
//        if(colors.size < 256)
//            System.out.println("UH-OH, colors.size is " + colors.size);
//
//        System.arraycopy(items, 64, palette, 64, 192);
//        
        ArrayList<Integer> mixingPalette = new ArrayList<>(256);
        for (int i = 0; i < PALETTE.length; i++) {
            mixingPalette.add(PALETTE[i]);
        }
//
//        mixingPalette.subList(64, 256).sort(hueComparator);
//        ArrayList<Integer> mixingPalette = new ArrayList<>(256);
//        for (int i = 0; i < 256; i++) {
//            mixingPalette.add(i * 0x01010100 | 0xFF);
//        }

//        float hueAngle = 0.1f, sat;
//        //0.7548776662466927, 0.5698402909980532,   0.6180339887498949
//        for (int i = 0; i < 6; i++) {
//            sat = sin_((i / 5f) * 0.5f) * 0.05f * 2f;
////            sat = TrigTools.sin_((i / 5.0) * 0.5) * 12.0;
////            palette[1 + i] = CIELABConverter.rgba8888((i / 5.0) * 100.0, TrigTools.cos_(hueAngle) * sat, TrigTools.sin_(hueAngle) * sat);
////            palette[1 + i] = Color.rgba8888(NamedColor.ycwcm((i / 5f), TrigTools.zigzag(hueAngle) * sat, TrigTools.zigzag(0.5f + hueAngle) * sat, 1f));
//            palette[1 + i] = Color.rgba8888(NamedColor.ycwcm((i / 5f), cosMaybe(hueAngle) * sat, sinMaybe(hueAngle) * sat, 1f));
//            hueAngle += 0.6180339887498949;
//        }
//        for (int i = 1; i < 7; i++) {
//            sat = sin_(((i + 3f) / 13f) * 0.5f) * 0.125f * 2f;
////            sat = TrigTools.sin_(((i + 2.0) / 11.0) * 0.5) * 28.0;
////            palette[6 + i] = CIELABConverter.rgba8888((i / 7.0) * 100.0, TrigTools.cos_(hueAngle) * sat, TrigTools.sin_(hueAngle) * sat);
////            palette[6 + i] = Color.rgba8888(NamedColor.ycwcm(((i+2f) / 11f), TrigTools.zigzag(hueAngle) * sat, TrigTools.zigzag(0.5f + hueAngle) * sat, 1f));
//            palette[6 + i] = Color.rgba8888(NamedColor.ycwcm(((i+2f) / 11f), cosMaybe(hueAngle) * sat, sinMaybe(hueAngle) * sat, 1f));
//            hueAngle += 0.6180339887498949;
//        }
//        for (int i = 1; i < 20; i++) {
//            sat = sin_(((i + 6f) / 32f) * 0.5f) * 0.2f * 2f;
////            sat = TrigTools.sin_(((i + 5) / 30.0) * 0.5) * (44.0 + 10.0 * TrigTools.cos(i * Math.E));
////            palette[12 + i] = CIELABConverter.rgba8888(Math.pow((i+5) / 30.0, 0.75) * 100.0, TrigTools.cos_(hueAngle) * sat, TrigTools.sin_(hueAngle) * sat);
////            palette[12 + i] = Color.rgba8888(NamedColor.ycwcm((float)Math.pow((i+4f) / 28.0f, 0.75), TrigTools.zigzag(hueAngle) * sat, TrigTools.zigzag(0.5f + hueAngle) * sat, 1f));
//            palette[12 + i] = Color.rgba8888(NamedColor.ycwcm((float)Math.pow((i+4f) / 28.0f, 0.625), cosMaybe(hueAngle) * sat, sinMaybe(hueAngle) * sat, 1f));
//            hueAngle += 0.6180339887498949;
//        }
        StringBuilder sb = new StringBuilder(mixingPalette.size() * 7);
        for (int i = 1; i < mixingPalette.size(); i++) {
            sb.append(String.format("%06x\n", mixingPalette.get(i) >>> 8));
        }
        Gdx.files.local("palettes/hex/"+HexGenerator.NAME+".hex").writeString(sb.toString(), false);
        System.out.println("new int[] {");
        for (int i = 0; i < mixingPalette.size(); i++) {
            System.out.print("0x" + StringKit.hex(mixingPalette.get(i)) + ", ");
            if((i & 7) == 7)
                System.out.println();
        }
        System.out.println("};");
        Gdx.app.exit();
    }


    @Override
    public void render() {
        Gdx.gl.glClearColor(0.4f, 0.4f, 0.4f, 1f);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
    }

    private static float cosMaybe(float angle){
        return cos_(angle * 0.25f) * 0.375f + TrigTools.cosq(angle - 0.5f) * 0.625f;
    }
    //3.141592653589793f
    private static float sinMaybe(float angle){
        return sin_(angle * 0.25f) * 0.375f + TrigTools.sinq(angle - 0.5f) * 0.625f;
    }

    private static int getInt(float color){
        final int c = FloatColorTools.floatToInt(color);
        return c | (c >>> 7 & 1);
    }
    public static float lerpHue (float from, float to, float progress) {
        to += 1.5f - from;
        to -= 0.5f + (int)to;
        from += to * progress + 1f;
        return from - (int)from;
        /*
        fract((fract(to + 0.5 - from) - 0.5) * progress + from)
         */
    }

}
